/*
 * generated by Xtext 2.34.0
 */
grammar InternalMCBasics;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.palladiosimulator.xtext.motiarc.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.palladiosimulator.xtext.motiarc.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.palladiosimulator.xtext.motiarc.services.MCBasicsGrammarAccess;

}
@parser::members {
	private MCBasicsGrammarAccess grammarAccess;

	public void setGrammarAccess(MCBasicsGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleImportStatements
entryRuleImportStatements
:
{ before(grammarAccess.getImportStatementsRule()); }
	 ruleImportStatements
{ after(grammarAccess.getImportStatementsRule()); } 
	 EOF 
;

// Rule ImportStatements
ruleImportStatements 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getImportStatementsAccess().getGroup()); }
		(rule__ImportStatements__Group__0)
		{ after(grammarAccess.getImportStatementsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMCPrimitiveType
entryRuleMCPrimitiveType
:
{ before(grammarAccess.getMCPrimitiveTypeRule()); }
	 ruleMCPrimitiveType
{ after(grammarAccess.getMCPrimitiveTypeRule()); } 
	 EOF 
;

// Rule MCPrimitiveType
ruleMCPrimitiveType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMCPrimitiveTypeAccess().getTypeAssignment()); }
		(rule__MCPrimitiveType__TypeAssignment)
		{ after(grammarAccess.getMCPrimitiveTypeAccess().getTypeAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMCArrayType
entryRuleMCArrayType
:
{ before(grammarAccess.getMCArrayTypeRule()); }
	 ruleMCArrayType
{ after(grammarAccess.getMCArrayTypeRule()); } 
	 EOF 
;

// Rule MCArrayType
ruleMCArrayType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMCArrayTypeAccess().getGroup()); }
		(rule__MCArrayType__Group__0)
		{ after(grammarAccess.getMCArrayTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MCPrimitiveType__TypeAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMCPrimitiveTypeAccess().getTypeBooleanKeyword_0_0()); }
		'boolean'
		{ after(grammarAccess.getMCPrimitiveTypeAccess().getTypeBooleanKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getMCPrimitiveTypeAccess().getTypeByteKeyword_0_1()); }
		'byte'
		{ after(grammarAccess.getMCPrimitiveTypeAccess().getTypeByteKeyword_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getMCPrimitiveTypeAccess().getTypeShortKeyword_0_2()); }
		'short'
		{ after(grammarAccess.getMCPrimitiveTypeAccess().getTypeShortKeyword_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getMCPrimitiveTypeAccess().getTypeIntKeyword_0_3()); }
		'int'
		{ after(grammarAccess.getMCPrimitiveTypeAccess().getTypeIntKeyword_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getMCPrimitiveTypeAccess().getTypeLongKeyword_0_4()); }
		'long'
		{ after(grammarAccess.getMCPrimitiveTypeAccess().getTypeLongKeyword_0_4()); }
	)
	|
	(
		{ before(grammarAccess.getMCPrimitiveTypeAccess().getTypeCharKeyword_0_5()); }
		'char'
		{ after(grammarAccess.getMCPrimitiveTypeAccess().getTypeCharKeyword_0_5()); }
	)
	|
	(
		{ before(grammarAccess.getMCPrimitiveTypeAccess().getTypeFloatKeyword_0_6()); }
		'float'
		{ after(grammarAccess.getMCPrimitiveTypeAccess().getTypeFloatKeyword_0_6()); }
	)
	|
	(
		{ before(grammarAccess.getMCPrimitiveTypeAccess().getTypeDoubleKeyword_0_7()); }
		'double'
		{ after(grammarAccess.getMCPrimitiveTypeAccess().getTypeDoubleKeyword_0_7()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportStatements__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImportStatements__Group__0__Impl
	rule__ImportStatements__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportStatements__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportStatementsAccess().getImportKeyword_0()); }
	'import'
	{ after(grammarAccess.getImportStatementsAccess().getImportKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportStatements__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImportStatements__Group__1__Impl
	rule__ImportStatements__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportStatements__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportStatementsAccess().getImportUriAssignment_1()); }
	(rule__ImportStatements__ImportUriAssignment_1)
	{ after(grammarAccess.getImportStatementsAccess().getImportUriAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportStatements__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImportStatements__Group__2__Impl
	rule__ImportStatements__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportStatements__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportStatementsAccess().getGroup_2()); }
	(rule__ImportStatements__Group_2__0)?
	{ after(grammarAccess.getImportStatementsAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportStatements__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImportStatements__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportStatements__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportStatementsAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getImportStatementsAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ImportStatements__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImportStatements__Group_2__0__Impl
	rule__ImportStatements__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportStatements__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportStatementsAccess().getFullStopKeyword_2_0()); }
	'.'
	{ after(grammarAccess.getImportStatementsAccess().getFullStopKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportStatements__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImportStatements__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportStatements__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportStatementsAccess().getStarAssignment_2_1()); }
	(rule__ImportStatements__StarAssignment_2_1)
	{ after(grammarAccess.getImportStatementsAccess().getStarAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MCArrayType__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MCArrayType__Group__0__Impl
	rule__MCArrayType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MCArrayType__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMCArrayTypeAccess().getMCPrimitiveTypeParserRuleCall_0()); }
	ruleMCPrimitiveType
	{ after(grammarAccess.getMCArrayTypeAccess().getMCPrimitiveTypeParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MCArrayType__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MCArrayType__Group__1__Impl
	rule__MCArrayType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MCArrayType__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMCArrayTypeAccess().getLeftSquareBracketKeyword_1()); }
	'['
	{ after(grammarAccess.getMCArrayTypeAccess().getLeftSquareBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MCArrayType__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MCArrayType__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MCArrayType__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMCArrayTypeAccess().getRightSquareBracketKeyword_2()); }
	']'
	{ after(grammarAccess.getMCArrayTypeAccess().getRightSquareBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ImportStatements__ImportUriAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImportStatementsAccess().getImportUriMCQUALIFIEDNAMETerminalRuleCall_1_0()); }
		RULE_MCQUALIFIEDNAME
		{ after(grammarAccess.getImportStatementsAccess().getImportUriMCQUALIFIEDNAMETerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportStatements__StarAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImportStatementsAccess().getStarAsteriskKeyword_2_1_0()); }
		(
			{ before(grammarAccess.getImportStatementsAccess().getStarAsteriskKeyword_2_1_0()); }
			'*'
			{ after(grammarAccess.getImportStatementsAccess().getStarAsteriskKeyword_2_1_0()); }
		)
		{ after(grammarAccess.getImportStatementsAccess().getStarAsteriskKeyword_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MCPrimitiveType__TypeAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMCPrimitiveTypeAccess().getTypeAlternatives_0()); }
		(rule__MCPrimitiveType__TypeAlternatives_0)
		{ after(grammarAccess.getMCPrimitiveTypeAccess().getTypeAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_MCQUALIFIEDNAME : RULE_ID ('.' RULE_ID)+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
