/*
 * generated by Xtext 2.34.0
 */
package org.palladiosimulator.xtext.motiarc.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.palladiosimulator.xtext.motiarc.ide.contentassist.antlr.internal.InternalMontiArcDSLParser;
import org.palladiosimulator.xtext.motiarc.services.MontiArcDSLGrammarAccess;

public class MontiArcDSLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MontiArcDSLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MontiArcDSLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getArcElementAccess().getAlternatives(), "rule__ArcElement__Alternatives");
			builder.put(grammarAccess.getPortAccess().getAlternatives_0(), "rule__Port__Alternatives_0");
			builder.put(grammarAccess.getAutomatonAccess().getAlternatives_4(), "rule__Automaton__Alternatives_4");
			builder.put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
			builder.put(grammarAccess.getMCPrimitiveTypeAccess().getTypeAlternatives_0(), "rule__MCPrimitiveType__TypeAlternatives_0");
			builder.put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
			builder.put(grammarAccess.getLiteralExpressionAccess().getAlternatives(), "rule__LiteralExpression__Alternatives");
			builder.put(grammarAccess.getMACompilationUnitAccess().getGroup(), "rule__MACompilationUnit__Group__0");
			builder.put(grammarAccess.getComponentAccess().getGroup(), "rule__Component__Group__0");
			builder.put(grammarAccess.getSignatureAccess().getGroup(), "rule__Signature__Group__0");
			builder.put(grammarAccess.getSignatureAccess().getGroup_2(), "rule__Signature__Group_2__0");
			builder.put(grammarAccess.getParametersAccess().getGroup(), "rule__Parameters__Group__0");
			builder.put(grammarAccess.getParametersAccess().getGroup_1(), "rule__Parameters__Group_1__0");
			builder.put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
			builder.put(grammarAccess.getParameterAccess().getGroup_2(), "rule__Parameter__Group_2__0");
			builder.put(grammarAccess.getSubComponentAccess().getGroup(), "rule__SubComponent__Group__0");
			builder.put(grammarAccess.getConnectorAccess().getGroup(), "rule__Connector__Group__0");
			builder.put(grammarAccess.getPortsAccess().getGroup(), "rule__Ports__Group__0");
			builder.put(grammarAccess.getPortsAccess().getGroup_2(), "rule__Ports__Group_2__0");
			builder.put(grammarAccess.getPortAccess().getGroup(), "rule__Port__Group__0");
			builder.put(grammarAccess.getNamesAccess().getGroup(), "rule__Names__Group__0");
			builder.put(grammarAccess.getNamesAccess().getGroup_1(), "rule__Names__Group_1__0");
			builder.put(grammarAccess.getVariableAccess().getGroup(), "rule__Variable__Group__0");
			builder.put(grammarAccess.getAutomatonAccess().getGroup(), "rule__Automaton__Group__0");
			builder.put(grammarAccess.getStateAccess().getGroup(), "rule__State__Group__0");
			builder.put(grammarAccess.getInitialStateAccess().getGroup(), "rule__InitialState__Group__0");
			builder.put(grammarAccess.getInitialStateAccess().getGroup_2(), "rule__InitialState__Group_2__0");
			builder.put(grammarAccess.getTransitionAccess().getGroup(), "rule__Transition__Group__0");
			builder.put(grammarAccess.getTransitionAccess().getGroup_1(), "rule__Transition__Group_1__0");
			builder.put(grammarAccess.getTransitionAccess().getGroup_2(), "rule__Transition__Group_2__0");
			builder.put(grammarAccess.getTransitionAccess().getGroup_3(), "rule__Transition__Group_3__0");
			builder.put(grammarAccess.getBlockAccess().getGroup(), "rule__Block__Group__0");
			builder.put(grammarAccess.getBlockAccess().getGroup_1(), "rule__Block__Group_1__0");
			builder.put(grammarAccess.getBlockAccess().getGroup_3(), "rule__Block__Group_3__0");
			builder.put(grammarAccess.getImportStatementsAccess().getGroup(), "rule__ImportStatements__Group__0");
			builder.put(grammarAccess.getImportStatementsAccess().getGroup_2(), "rule__ImportStatements__Group_2__0");
			builder.put(grammarAccess.getPackageAccess().getGroup(), "rule__Package__Group__0");
			builder.put(grammarAccess.getMCArrayTypeAccess().getGroup(), "rule__MCArrayType__Group__0");
			builder.put(grammarAccess.getArgumentsAccess().getGroup(), "rule__Arguments__Group__0");
			builder.put(grammarAccess.getArgumentsAccess().getGroup_2(), "rule__Arguments__Group_2__0");
			builder.put(grammarAccess.getArgumentAccess().getGroup(), "rule__Argument__Group__0");
			builder.put(grammarAccess.getMACompilationUnitAccess().getPackageAssignment_0(), "rule__MACompilationUnit__PackageAssignment_0");
			builder.put(grammarAccess.getMACompilationUnitAccess().getImportStatementsAssignment_1(), "rule__MACompilationUnit__ImportStatementsAssignment_1");
			builder.put(grammarAccess.getMACompilationUnitAccess().getComponentAssignment_2(), "rule__MACompilationUnit__ComponentAssignment_2");
			builder.put(grammarAccess.getComponentAccess().getNameAssignment_1(), "rule__Component__NameAssignment_1");
			builder.put(grammarAccess.getComponentAccess().getSignatureAssignment_2(), "rule__Component__SignatureAssignment_2");
			builder.put(grammarAccess.getComponentAccess().getArcElementsAssignment_4(), "rule__Component__ArcElementsAssignment_4");
			builder.put(grammarAccess.getSignatureAccess().getParametersAssignment_1(), "rule__Signature__ParametersAssignment_1");
			builder.put(grammarAccess.getSignatureAccess().getTypeAssignment_2_1(), "rule__Signature__TypeAssignment_2_1");
			builder.put(grammarAccess.getParametersAccess().getParametersAssignment_0(), "rule__Parameters__ParametersAssignment_0");
			builder.put(grammarAccess.getParametersAccess().getParametersAssignment_1_1(), "rule__Parameters__ParametersAssignment_1_1");
			builder.put(grammarAccess.getParameterAccess().getTypeAssignment_0(), "rule__Parameter__TypeAssignment_0");
			builder.put(grammarAccess.getParameterAccess().getNameAssignment_1(), "rule__Parameter__NameAssignment_1");
			builder.put(grammarAccess.getParameterAccess().getExpressionAssignment_2_1(), "rule__Parameter__ExpressionAssignment_2_1");
			builder.put(grammarAccess.getSubComponentAccess().getTypeAssignment_1(), "rule__SubComponent__TypeAssignment_1");
			builder.put(grammarAccess.getSubComponentAccess().getArgumentsAssignment_2(), "rule__SubComponent__ArgumentsAssignment_2");
			builder.put(grammarAccess.getSubComponentAccess().getInstancesAssignment_3(), "rule__SubComponent__InstancesAssignment_3");
			builder.put(grammarAccess.getConnectorAccess().getSourceAssignment_1(), "rule__Connector__SourceAssignment_1");
			builder.put(grammarAccess.getConnectorAccess().getTargetsAssignment_3(), "rule__Connector__TargetsAssignment_3");
			builder.put(grammarAccess.getPortsAccess().getPortsAssignment_1(), "rule__Ports__PortsAssignment_1");
			builder.put(grammarAccess.getPortsAccess().getPortsAssignment_2_1(), "rule__Ports__PortsAssignment_2_1");
			builder.put(grammarAccess.getPortAccess().getInAssignment_0_0(), "rule__Port__InAssignment_0_0");
			builder.put(grammarAccess.getPortAccess().getOutAssignment_0_1(), "rule__Port__OutAssignment_0_1");
			builder.put(grammarAccess.getPortAccess().getTypeAssignment_1(), "rule__Port__TypeAssignment_1");
			builder.put(grammarAccess.getPortAccess().getNamesAssignment_2(), "rule__Port__NamesAssignment_2");
			builder.put(grammarAccess.getNamesAccess().getNamesAssignment_0(), "rule__Names__NamesAssignment_0");
			builder.put(grammarAccess.getNamesAccess().getNamesAssignment_1_1(), "rule__Names__NamesAssignment_1_1");
			builder.put(grammarAccess.getVariableAccess().getTypeAssignment_0(), "rule__Variable__TypeAssignment_0");
			builder.put(grammarAccess.getVariableAccess().getNamesAssignment_1(), "rule__Variable__NamesAssignment_1");
			builder.put(grammarAccess.getAutomatonAccess().getNameAssignment_2(), "rule__Automaton__NameAssignment_2");
			builder.put(grammarAccess.getAutomatonAccess().getStatesAssignment_4_0(), "rule__Automaton__StatesAssignment_4_0");
			builder.put(grammarAccess.getAutomatonAccess().getInitialStatesAssignment_4_1(), "rule__Automaton__InitialStatesAssignment_4_1");
			builder.put(grammarAccess.getAutomatonAccess().getTransitionsAssignment_4_2(), "rule__Automaton__TransitionsAssignment_4_2");
			builder.put(grammarAccess.getStateAccess().getNameAssignment_1(), "rule__State__NameAssignment_1");
			builder.put(grammarAccess.getInitialStateAccess().getNameAssignment_1(), "rule__InitialState__NameAssignment_1");
			builder.put(grammarAccess.getInitialStateAccess().getBlockAssignment_2_1(), "rule__InitialState__BlockAssignment_2_1");
			builder.put(grammarAccess.getTransitionAccess().getSourceAssignment_0(), "rule__Transition__SourceAssignment_0");
			builder.put(grammarAccess.getTransitionAccess().getTargetAssignment_1_1(), "rule__Transition__TargetAssignment_1_1");
			builder.put(grammarAccess.getTransitionAccess().getExpressionAssignment_2_1(), "rule__Transition__ExpressionAssignment_2_1");
			builder.put(grammarAccess.getTransitionAccess().getReactionAssignment_3_1(), "rule__Transition__ReactionAssignment_3_1");
			builder.put(grammarAccess.getBlockAccess().getNameAssignment_1_0(), "rule__Block__NameAssignment_1_0");
			builder.put(grammarAccess.getBlockAccess().getExpressionsAssignment_2(), "rule__Block__ExpressionsAssignment_2");
			builder.put(grammarAccess.getBlockAccess().getExpressionsAssignment_3_1(), "rule__Block__ExpressionsAssignment_3_1");
			builder.put(grammarAccess.getImportStatementsAccess().getImportUriAssignment_1(), "rule__ImportStatements__ImportUriAssignment_1");
			builder.put(grammarAccess.getImportStatementsAccess().getStarAssignment_2_1(), "rule__ImportStatements__StarAssignment_2_1");
			builder.put(grammarAccess.getPackageAccess().getNameAssignment_1(), "rule__Package__NameAssignment_1");
			builder.put(grammarAccess.getMCPrimitiveTypeAccess().getTypeAssignment(), "rule__MCPrimitiveType__TypeAssignment");
			builder.put(grammarAccess.getNumberLiteralAccess().getLiteralAssignment(), "rule__NumberLiteral__LiteralAssignment");
			builder.put(grammarAccess.getStringLiteralAccess().getLiteralAssignment(), "rule__StringLiteral__LiteralAssignment");
			builder.put(grammarAccess.getNameExpressionAccess().getNameAssignment(), "rule__NameExpression__NameAssignment");
			builder.put(grammarAccess.getArgumentsAccess().getArgumentsAssignment_1(), "rule__Arguments__ArgumentsAssignment_1");
			builder.put(grammarAccess.getArgumentsAccess().getArgumentsAssignment_2_1(), "rule__Arguments__ArgumentsAssignment_2_1");
			builder.put(grammarAccess.getArgumentAccess().getNameAssignment_0(), "rule__Argument__NameAssignment_0");
			builder.put(grammarAccess.getArgumentAccess().getExpressionAssignment_1(), "rule__Argument__ExpressionAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MontiArcDSLGrammarAccess grammarAccess;

	@Override
	protected InternalMontiArcDSLParser createParser() {
		InternalMontiArcDSLParser result = new InternalMontiArcDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MontiArcDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MontiArcDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
