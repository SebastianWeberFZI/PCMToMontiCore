/*
 * generated by Xtext 2.34.0
 */
package org.palladiosimulator.xtext.motiarc.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.palladiosimulator.xtext.motiarc.ide.contentassist.antlr.internal.InternalMCBasicsParser;
import org.palladiosimulator.xtext.motiarc.services.MCBasicsGrammarAccess;

public class MCBasicsParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MCBasicsGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MCBasicsGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
			builder.put(grammarAccess.getMCPrimitiveTypeAccess().getTypeAlternatives_0(), "rule__MCPrimitiveType__TypeAlternatives_0");
			builder.put(grammarAccess.getImportStatementsAccess().getGroup(), "rule__ImportStatements__Group__0");
			builder.put(grammarAccess.getImportStatementsAccess().getGroup_2(), "rule__ImportStatements__Group_2__0");
			builder.put(grammarAccess.getPackageAccess().getGroup(), "rule__Package__Group__0");
			builder.put(grammarAccess.getMCArrayTypeAccess().getGroup(), "rule__MCArrayType__Group__0");
			builder.put(grammarAccess.getExpressionAccess().getGroup(), "rule__Expression__Group__0");
			builder.put(grammarAccess.getArgumentsAccess().getGroup(), "rule__Arguments__Group__0");
			builder.put(grammarAccess.getImportStatementsAccess().getImportUriAssignment_1(), "rule__ImportStatements__ImportUriAssignment_1");
			builder.put(grammarAccess.getImportStatementsAccess().getStarAssignment_2_1(), "rule__ImportStatements__StarAssignment_2_1");
			builder.put(grammarAccess.getPackageAccess().getNameAssignment_1(), "rule__Package__NameAssignment_1");
			builder.put(grammarAccess.getMCPrimitiveTypeAccess().getTypeAssignment(), "rule__MCPrimitiveType__TypeAssignment");
			builder.put(grammarAccess.getExpressionAccess().getNameAssignment_1(), "rule__Expression__NameAssignment_1");
			builder.put(grammarAccess.getArgumentsAccess().getNameAssignment_1(), "rule__Arguments__NameAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MCBasicsGrammarAccess grammarAccess;

	@Override
	protected InternalMCBasicsParser createParser() {
		InternalMCBasicsParser result = new InternalMCBasicsParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MCBasicsGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MCBasicsGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
