/*
 * generated by Xtext 2.34.0
 */
package org.palladiosimulator.xtext.motiarc.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.palladiosimulator.xtext.motiarc.montiArcDSL.MACompilationUnit
import java.io.FileInputStream
import com.google.inject.Provider
import org.eclipse.emf.ecore.resource.ResourceSet
import org.eclipse.emf.common.util.URI

@ExtendWith(InjectionExtension)
@InjectWith(MontiArcDSLInjectorProvider)
class MontiArcDSLParsingTest {
	@Inject
	ParseHelper<MACompilationUnit> parseHelper
	
	@Inject
	Provider<ResourceSet> rsp
	
		
	@Test
	def void parseLogger() {
		val rs = rsp.get
		// better use a file uri, but your question lacks context
		//val r = rs.getResource(URI.createFileURI("Logger.arc"), true)
		val result = parseHelper.parse(new FileInputStream("src/test/resources/Logger.arc"), URI.createFileURI("src/test/resources/Logger.arc"),null, rs)
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		
		
	}
	
	
	@Test
	def void parseBumperBot() {
		val rs = rsp.get
		// better use a file uri, but your question lacks context
		//val r = rs.getResource(URI.createFileURI("Logger.arc"), true)
		val result = parseHelper.parse(new FileInputStream("src/test/resources/BumperBot.arc"), URI.createFileURI("src/test/resources/BumperBot.arc"),null, rs)
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}

		@Test
	def void parseBumpControl() {
		val rs = rsp.get
		// better use a file uri, but your question lacks context
		//val r = rs.getResource(URI.createFileURI("Logger.arc"), true)
		val result = parseHelper.parse(new FileInputStream("src/test/resources/BumpControl.arc"), URI.createFileURI("src/test/resources/BumpControl.arc"),null, rs)
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	

}
