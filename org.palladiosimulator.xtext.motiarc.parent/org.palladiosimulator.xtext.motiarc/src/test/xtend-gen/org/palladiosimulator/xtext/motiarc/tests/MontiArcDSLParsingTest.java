/**
 * generated by Xtext 2.34.0
 */
package org.palladiosimulator.xtext.motiarc.tests;

import com.google.inject.Inject;
import com.google.inject.Provider;
import java.io.FileInputStream;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.palladiosimulator.xtext.motiarc.montiArcDSL.MACompilationUnit;

@ExtendWith(InjectionExtension.class)
@InjectWith(MontiArcDSLInjectorProvider.class)
@SuppressWarnings("all")
public class MontiArcDSLParsingTest {
  @Inject
  private ParseHelper<MACompilationUnit> parseHelper;

  @Inject
  private Provider<ResourceSet> rsp;

  @Test
  public void parseLogger() {
    try {
      final ResourceSet rs = this.rsp.get();
      FileInputStream _fileInputStream = new FileInputStream("src/test/resources/Logger.arc");
      final MACompilationUnit result = this.parseHelper.parse(_fileInputStream, URI.createFileURI("src/test/resources/Logger.arc"), null, rs);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder.append(_join);
      Assertions.assertTrue(_isEmpty, _builder.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void parseBumperBot() {
    try {
      final ResourceSet rs = this.rsp.get();
      FileInputStream _fileInputStream = new FileInputStream("src/test/resources/BumperBot.arc");
      final MACompilationUnit result = this.parseHelper.parse(_fileInputStream, URI.createFileURI("src/test/resources/BumperBot.arc"), null, rs);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder.append(_join);
      Assertions.assertTrue(_isEmpty, _builder.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void parseBumpControl() {
    try {
      final ResourceSet rs = this.rsp.get();
      FileInputStream _fileInputStream = new FileInputStream("src/test/resources/BumpControl.arc");
      final MACompilationUnit result = this.parseHelper.parse(_fileInputStream, URI.createFileURI("src/test/resources/BumpControl.arc"), null, rs);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder.append(_join);
      Assertions.assertTrue(_isEmpty, _builder.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
