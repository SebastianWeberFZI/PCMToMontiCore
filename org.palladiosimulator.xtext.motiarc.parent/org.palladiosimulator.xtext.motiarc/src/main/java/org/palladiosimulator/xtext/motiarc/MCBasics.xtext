grammar  org.palladiosimulator.xtext.motiarc.MCBasics with org.eclipse.xtext.common.Terminals

generate mcBasics "http://www.palladiosimulator.org/xtext/moticore/MCBasics"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore


ImportStatements:
	'import' importUri=MCQUALIFIEDNAME star?=DOTSTAR? ";" 
;


Package:
	'package' name=(MCQUALIFIEDNAME | ID)';'
;

Type:
	MCPrimitiveType | MCArrayType | MCObjectType | MCCollectionType
;



MCPrimitiveType:
     type = ( 'boolean' | 'byte' | 'short' | 'int' 
                  | 'long' | 'char' |'float' | 'double' )
;

MCObjectType:
	type = ( 'Boolean' | 'Byte' | 'Integer' 
                  | 'Long' | 'Char' |'Double' | 'String' )
;

MCVoidType:
	type = 'void'
;

MCCollectionType:
	collection = ('Set' | 'List' | 'Map' | 'Optional') '<' innerType=Type '>'
;

MCArrayType:
	MCPrimitiveType'['']'
;

Expression:
	NameExpression | LiteralExpression | BinaryExpression
;

LiteralExpression:
	NumberLiteral | StringLiteral
;

NumberLiteral:
  literal=INT
;

StringLiteral:
	literal=STRING
; 

NameExpression:
	name=ID | qualifiedname=MCQUALIFIEDNAME
;

BinaryExpression:
	literal1 = (LiteralExpression|NameExpression) op=Operator literal2= (LiteralExpression|NameExpression)
;

enum Operator:
	GT='>'| LT='<' | EQ='==' | BA='&&' | PLUS='+' | MINUS='-' | DIV='/' | MULT='*'
;

Arguments:
	'(' arguments+=Argument (',' arguments+=Argument)* ')'
;

Argument: 
	name?=ID expression=Expression
;

terminal MCQUALIFIEDNAME returns ecore::EString:
	ID ('.' ID)+
;

terminal DOTSTAR:
	'.*'
;
