grammar org.palladiosimulator.xtext.motiarc.MontiArcDSL with org.palladiosimulator.xtext.motiarc.MCBasics

//r MontiArc with MCBasics
generate montiArcDSL "http://www.palladiosimulator.org/xtext/motiarc/MontiArcDSL"

import "http://www.palladiosimulator.org/xtext/monticore/classdiagram" as cd

MACompilationUnit:
	package=Package importStatements+=ImportStatements*
	component=Component;

// Component Head
Component:
	"component" name=ID signature=Signature
	"{" arcElements+=ArcElement* "}"
;

Signature:
	{Signature} parameters?=Parameters? ("extends" type?=Type)?;

Parameters:
	parameters+=Parameter ("," parameters+=Parameter)*;
	
ComponentType:
	type = ([Component])
;

Parameter:
	type=Type name=ID ("=" expression?=Expression)?;

ArcElement:
	Component | SubComponent | Connector | Ports | Variable | Automaton;

// Component Body Elements
SubComponent:
	"component" type=Type arguments?=Arguments? instances=Names ";";

Connector:
	source=(ID|MCQUALIFIEDNAME) "->" targets=Names ";";

Ports:
	"port" ports+=Port ("," ports+=Port)* ";";

Port:
	(assume=Assume)?(sync?=SYNC)?(in?="in" | out?="out") (type=Type|datatype=([cd::CDDefinition])) names?=Names? ;


Assume:
	'<<''assume' '=' condition=STRING '>>'
;
Names:
	names+=(ID|MCQUALIFIEDNAME) ("," names+=(ID|MCQUALIFIEDNAME))*;

// Embedded Behavior Elements
Variable:
	type=(Type|ComponentType) names?=Names? ('('parameters+=Expression(','parameters+=Expression)*')')?";";

Automaton:
	{Automaton} (sync?=SYNC)? "automaton" name?=ID? "{" (states+=State |
	transitions+=Transition)* "}";

State:
	SCState | InvState
;

SCState:
	(modifier+=SCModifier)* (ante=SCSAnte)? "state" name=ID ";";

InvState:
	(modifier+=SCModifier)* "state" name=ID '[' expression=Expression ']'";";


SCSAnte:
	{SCSAnte} (block=Block)
;

enum SCModifier:
	INITIAL='initial' | FINAL='final'	
;


Transition:
	source=[State] ("->" target=[State])?
	("[" expression=Expression "]")?("/" reaction=Block)?";";

Block:
	{Block} '{' blocks+=BlockStatement* '}';
	
BlockStatement:
	SimpleInit | SimpleExpression
;

SimpleExpression:
	expression=Expression ';'
;

SimpleInit:
	name=ID "=" expressions+=Expression';'
;
	
	
terminal SYNC:
	"<<sync>>"
;
