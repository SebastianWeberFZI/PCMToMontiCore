/**
 * generated by Xtext 2.34.0
 */
package org.palladiosimulator.xtext.motiarc.montiCoreCD.impl;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

import org.palladiosimulator.xtext.motiarc.mcBasics.McBasicsPackage;

import org.palladiosimulator.xtext.motiarc.montiCoreCD.CDClass;
import org.palladiosimulator.xtext.motiarc.montiCoreCD.CDDefinition;
import org.palladiosimulator.xtext.motiarc.montiCoreCD.CDEnum;
import org.palladiosimulator.xtext.motiarc.montiCoreCD.ClassDiagram;
import org.palladiosimulator.xtext.motiarc.montiCoreCD.ClassDiagramCompilationUnit;
import org.palladiosimulator.xtext.motiarc.montiCoreCD.Member;
import org.palladiosimulator.xtext.motiarc.montiCoreCD.MontiCoreCDFactory;
import org.palladiosimulator.xtext.motiarc.montiCoreCD.MontiCoreCDPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MontiCoreCDPackageImpl extends EPackageImpl implements MontiCoreCDPackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass classDiagramCompilationUnitEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass classDiagramEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass cdDefinitionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass cdClassEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass cdEnumEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass memberEClass = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see org.palladiosimulator.xtext.motiarc.montiCoreCD.MontiCoreCDPackage#eNS_URI
   * @see #init()
   * @generated
   */
  private MontiCoreCDPackageImpl()
  {
    super(eNS_URI, MontiCoreCDFactory.eINSTANCE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   *
   * <p>This method is used to initialize {@link MontiCoreCDPackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static MontiCoreCDPackage init()
  {
    if (isInited) return (MontiCoreCDPackage)EPackage.Registry.INSTANCE.getEPackage(MontiCoreCDPackage.eNS_URI);

    // Obtain or create and register package
    Object registeredMontiCoreCDPackage = EPackage.Registry.INSTANCE.get(eNS_URI);
    MontiCoreCDPackageImpl theMontiCoreCDPackage = registeredMontiCoreCDPackage instanceof MontiCoreCDPackageImpl ? (MontiCoreCDPackageImpl)registeredMontiCoreCDPackage : new MontiCoreCDPackageImpl();

    isInited = true;

    // Initialize simple dependencies
    McBasicsPackage.eINSTANCE.eClass();

    // Create package meta-data objects
    theMontiCoreCDPackage.createPackageContents();

    // Initialize created meta-data
    theMontiCoreCDPackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theMontiCoreCDPackage.freeze();

    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(MontiCoreCDPackage.eNS_URI, theMontiCoreCDPackage);
    return theMontiCoreCDPackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getClassDiagramCompilationUnit()
  {
    return classDiagramCompilationUnitEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getClassDiagramCompilationUnit_Package()
  {
    return (EReference)classDiagramCompilationUnitEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getClassDiagramCompilationUnit_ImportStatements()
  {
    return (EReference)classDiagramCompilationUnitEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getClassDiagramCompilationUnit_Diagram()
  {
    return (EReference)classDiagramCompilationUnitEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getClassDiagram()
  {
    return classDiagramEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getClassDiagram_Name()
  {
    return (EAttribute)classDiagramEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getClassDiagram_CdElements()
  {
    return (EReference)classDiagramEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCDDefinition()
  {
    return cdDefinitionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCDDefinition_Public()
  {
    return (EAttribute)cdDefinitionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCDDefinition_Name()
  {
    return (EAttribute)cdDefinitionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCDClass()
  {
    return cdClassEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCDClass_Extends()
  {
    return (EAttribute)cdClassEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCDClass_Implements()
  {
    return (EAttribute)cdClassEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCDClass_Members()
  {
    return (EReference)cdClassEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCDEnum()
  {
    return cdEnumEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCDEnum_Values()
  {
    return (EAttribute)cdEnumEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getMember()
  {
    return memberEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMember_Type()
  {
    return (EReference)memberEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMember_Name()
  {
    return (EAttribute)memberEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MontiCoreCDFactory getMontiCoreCDFactory()
  {
    return (MontiCoreCDFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    classDiagramCompilationUnitEClass = createEClass(CLASS_DIAGRAM_COMPILATION_UNIT);
    createEReference(classDiagramCompilationUnitEClass, CLASS_DIAGRAM_COMPILATION_UNIT__PACKAGE);
    createEReference(classDiagramCompilationUnitEClass, CLASS_DIAGRAM_COMPILATION_UNIT__IMPORT_STATEMENTS);
    createEReference(classDiagramCompilationUnitEClass, CLASS_DIAGRAM_COMPILATION_UNIT__DIAGRAM);

    classDiagramEClass = createEClass(CLASS_DIAGRAM);
    createEAttribute(classDiagramEClass, CLASS_DIAGRAM__NAME);
    createEReference(classDiagramEClass, CLASS_DIAGRAM__CD_ELEMENTS);

    cdDefinitionEClass = createEClass(CD_DEFINITION);
    createEAttribute(cdDefinitionEClass, CD_DEFINITION__PUBLIC);
    createEAttribute(cdDefinitionEClass, CD_DEFINITION__NAME);

    cdClassEClass = createEClass(CD_CLASS);
    createEAttribute(cdClassEClass, CD_CLASS__EXTENDS);
    createEAttribute(cdClassEClass, CD_CLASS__IMPLEMENTS);
    createEReference(cdClassEClass, CD_CLASS__MEMBERS);

    cdEnumEClass = createEClass(CD_ENUM);
    createEAttribute(cdEnumEClass, CD_ENUM__VALUES);

    memberEClass = createEClass(MEMBER);
    createEReference(memberEClass, MEMBER__TYPE);
    createEAttribute(memberEClass, MEMBER__NAME);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Obtain other dependent packages
    McBasicsPackage theMcBasicsPackage = (McBasicsPackage)EPackage.Registry.INSTANCE.getEPackage(McBasicsPackage.eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes
    cdClassEClass.getESuperTypes().add(this.getCDDefinition());
    cdEnumEClass.getESuperTypes().add(this.getCDDefinition());

    // Initialize classes and features; add operations and parameters
    initEClass(classDiagramCompilationUnitEClass, ClassDiagramCompilationUnit.class, "ClassDiagramCompilationUnit", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getClassDiagramCompilationUnit_Package(), theMcBasicsPackage.getPackage(), null, "package", null, 0, 1, ClassDiagramCompilationUnit.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getClassDiagramCompilationUnit_ImportStatements(), theMcBasicsPackage.getImportStatements(), null, "importStatements", null, 0, -1, ClassDiagramCompilationUnit.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getClassDiagramCompilationUnit_Diagram(), this.getClassDiagram(), null, "diagram", null, 0, 1, ClassDiagramCompilationUnit.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(classDiagramEClass, ClassDiagram.class, "ClassDiagram", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getClassDiagram_Name(), ecorePackage.getEString(), "name", null, 0, 1, ClassDiagram.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getClassDiagram_CdElements(), this.getCDDefinition(), null, "cdElements", null, 0, -1, ClassDiagram.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(cdDefinitionEClass, CDDefinition.class, "CDDefinition", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getCDDefinition_Public(), ecorePackage.getEBoolean(), "public", null, 0, 1, CDDefinition.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getCDDefinition_Name(), ecorePackage.getEString(), "name", null, 0, 1, CDDefinition.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(cdClassEClass, CDClass.class, "CDClass", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getCDClass_Extends(), ecorePackage.getEString(), "extends", null, 0, 1, CDClass.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getCDClass_Implements(), ecorePackage.getEString(), "implements", null, 0, -1, CDClass.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCDClass_Members(), this.getMember(), null, "members", null, 0, -1, CDClass.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(cdEnumEClass, CDEnum.class, "CDEnum", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getCDEnum_Values(), ecorePackage.getEString(), "values", null, 0, -1, CDEnum.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(memberEClass, Member.class, "Member", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getMember_Type(), ecorePackage.getEObject(), null, "type", null, 0, 1, Member.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMember_Name(), ecorePackage.getEString(), "name", null, 0, 1, Member.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    // Create resource
    createResource(eNS_URI);
  }

} //MontiCoreCDPackageImpl
