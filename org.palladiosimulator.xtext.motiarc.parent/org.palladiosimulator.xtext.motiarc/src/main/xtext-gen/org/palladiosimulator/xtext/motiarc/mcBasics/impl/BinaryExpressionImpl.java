/**
 * generated by Xtext 2.34.0
 */
package org.palladiosimulator.xtext.motiarc.mcBasics.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.palladiosimulator.xtext.motiarc.mcBasics.BinaryExpression;
import org.palladiosimulator.xtext.motiarc.mcBasics.Expression;
import org.palladiosimulator.xtext.motiarc.mcBasics.McBasicsPackage;
import org.palladiosimulator.xtext.motiarc.mcBasics.Operator;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Binary Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.palladiosimulator.xtext.motiarc.mcBasics.impl.BinaryExpressionImpl#getLiteral1 <em>Literal1</em>}</li>
 *   <li>{@link org.palladiosimulator.xtext.motiarc.mcBasics.impl.BinaryExpressionImpl#getOp <em>Op</em>}</li>
 *   <li>{@link org.palladiosimulator.xtext.motiarc.mcBasics.impl.BinaryExpressionImpl#getLiteral2 <em>Literal2</em>}</li>
 * </ul>
 *
 * @generated
 */
public class BinaryExpressionImpl extends ExpressionImpl implements BinaryExpression
{
  /**
   * The cached value of the '{@link #getLiteral1() <em>Literal1</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLiteral1()
   * @generated
   * @ordered
   */
  protected Expression literal1;

  /**
   * The default value of the '{@link #getOp() <em>Op</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOp()
   * @generated
   * @ordered
   */
  protected static final Operator OP_EDEFAULT = Operator.GT;

  /**
   * The cached value of the '{@link #getOp() <em>Op</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOp()
   * @generated
   * @ordered
   */
  protected Operator op = OP_EDEFAULT;

  /**
   * The cached value of the '{@link #getLiteral2() <em>Literal2</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLiteral2()
   * @generated
   * @ordered
   */
  protected Expression literal2;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BinaryExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return McBasicsPackage.Literals.BINARY_EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getLiteral1()
  {
    return literal1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLiteral1(Expression newLiteral1, NotificationChain msgs)
  {
    Expression oldLiteral1 = literal1;
    literal1 = newLiteral1;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, McBasicsPackage.BINARY_EXPRESSION__LITERAL1, oldLiteral1, newLiteral1);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLiteral1(Expression newLiteral1)
  {
    if (newLiteral1 != literal1)
    {
      NotificationChain msgs = null;
      if (literal1 != null)
        msgs = ((InternalEObject)literal1).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - McBasicsPackage.BINARY_EXPRESSION__LITERAL1, null, msgs);
      if (newLiteral1 != null)
        msgs = ((InternalEObject)newLiteral1).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - McBasicsPackage.BINARY_EXPRESSION__LITERAL1, null, msgs);
      msgs = basicSetLiteral1(newLiteral1, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, McBasicsPackage.BINARY_EXPRESSION__LITERAL1, newLiteral1, newLiteral1));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Operator getOp()
  {
    return op;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOp(Operator newOp)
  {
    Operator oldOp = op;
    op = newOp == null ? OP_EDEFAULT : newOp;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, McBasicsPackage.BINARY_EXPRESSION__OP, oldOp, op));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getLiteral2()
  {
    return literal2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLiteral2(Expression newLiteral2, NotificationChain msgs)
  {
    Expression oldLiteral2 = literal2;
    literal2 = newLiteral2;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, McBasicsPackage.BINARY_EXPRESSION__LITERAL2, oldLiteral2, newLiteral2);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLiteral2(Expression newLiteral2)
  {
    if (newLiteral2 != literal2)
    {
      NotificationChain msgs = null;
      if (literal2 != null)
        msgs = ((InternalEObject)literal2).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - McBasicsPackage.BINARY_EXPRESSION__LITERAL2, null, msgs);
      if (newLiteral2 != null)
        msgs = ((InternalEObject)newLiteral2).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - McBasicsPackage.BINARY_EXPRESSION__LITERAL2, null, msgs);
      msgs = basicSetLiteral2(newLiteral2, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, McBasicsPackage.BINARY_EXPRESSION__LITERAL2, newLiteral2, newLiteral2));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case McBasicsPackage.BINARY_EXPRESSION__LITERAL1:
        return basicSetLiteral1(null, msgs);
      case McBasicsPackage.BINARY_EXPRESSION__LITERAL2:
        return basicSetLiteral2(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case McBasicsPackage.BINARY_EXPRESSION__LITERAL1:
        return getLiteral1();
      case McBasicsPackage.BINARY_EXPRESSION__OP:
        return getOp();
      case McBasicsPackage.BINARY_EXPRESSION__LITERAL2:
        return getLiteral2();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case McBasicsPackage.BINARY_EXPRESSION__LITERAL1:
        setLiteral1((Expression)newValue);
        return;
      case McBasicsPackage.BINARY_EXPRESSION__OP:
        setOp((Operator)newValue);
        return;
      case McBasicsPackage.BINARY_EXPRESSION__LITERAL2:
        setLiteral2((Expression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case McBasicsPackage.BINARY_EXPRESSION__LITERAL1:
        setLiteral1((Expression)null);
        return;
      case McBasicsPackage.BINARY_EXPRESSION__OP:
        setOp(OP_EDEFAULT);
        return;
      case McBasicsPackage.BINARY_EXPRESSION__LITERAL2:
        setLiteral2((Expression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case McBasicsPackage.BINARY_EXPRESSION__LITERAL1:
        return literal1 != null;
      case McBasicsPackage.BINARY_EXPRESSION__OP:
        return op != OP_EDEFAULT;
      case McBasicsPackage.BINARY_EXPRESSION__LITERAL2:
        return literal2 != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (op: ");
    result.append(op);
    result.append(')');
    return result.toString();
  }

} //BinaryExpressionImpl
