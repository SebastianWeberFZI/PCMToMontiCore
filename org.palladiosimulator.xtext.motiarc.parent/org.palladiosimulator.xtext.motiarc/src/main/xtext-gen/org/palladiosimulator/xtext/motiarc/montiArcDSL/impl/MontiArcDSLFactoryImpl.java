/**
 * generated by Xtext 2.34.0
 */
package org.palladiosimulator.xtext.motiarc.montiArcDSL.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.palladiosimulator.xtext.motiarc.montiArcDSL.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MontiArcDSLFactoryImpl extends EFactoryImpl implements MontiArcDSLFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static MontiArcDSLFactory init()
  {
    try
    {
      MontiArcDSLFactory theMontiArcDSLFactory = (MontiArcDSLFactory)EPackage.Registry.INSTANCE.getEFactory(MontiArcDSLPackage.eNS_URI);
      if (theMontiArcDSLFactory != null)
      {
        return theMontiArcDSLFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new MontiArcDSLFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MontiArcDSLFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case MontiArcDSLPackage.MA_COMPILATION_UNIT: return createMACompilationUnit();
      case MontiArcDSLPackage.COMPONENT: return createComponent();
      case MontiArcDSLPackage.SIGNATURE: return createSignature();
      case MontiArcDSLPackage.PARAMETERS: return createParameters();
      case MontiArcDSLPackage.COMPONENT_TYPE: return createComponentType();
      case MontiArcDSLPackage.PARAMETER: return createParameter();
      case MontiArcDSLPackage.ARC_ELEMENT: return createArcElement();
      case MontiArcDSLPackage.SUB_COMPONENT: return createSubComponent();
      case MontiArcDSLPackage.CONNECTOR: return createConnector();
      case MontiArcDSLPackage.PORTS: return createPorts();
      case MontiArcDSLPackage.PORT: return createPort();
      case MontiArcDSLPackage.ASSUME: return createAssume();
      case MontiArcDSLPackage.NAMES: return createNames();
      case MontiArcDSLPackage.VARIABLE: return createVariable();
      case MontiArcDSLPackage.AUTOMATON: return createAutomaton();
      case MontiArcDSLPackage.STATE: return createState();
      case MontiArcDSLPackage.SC_STATE: return createSCState();
      case MontiArcDSLPackage.INV_STATE: return createInvState();
      case MontiArcDSLPackage.SCS_ANTE: return createSCSAnte();
      case MontiArcDSLPackage.TRANSITION: return createTransition();
      case MontiArcDSLPackage.BLOCK: return createBlock();
      case MontiArcDSLPackage.BLOCK_STATEMENT: return createBlockStatement();
      case MontiArcDSLPackage.SIMPLE_EXPRESSION: return createSimpleExpression();
      case MontiArcDSLPackage.SIMPLE_INIT: return createSimpleInit();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case MontiArcDSLPackage.SC_MODIFIER:
        return createSCModifierFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case MontiArcDSLPackage.SC_MODIFIER:
        return convertSCModifierToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MACompilationUnit createMACompilationUnit()
  {
    MACompilationUnitImpl maCompilationUnit = new MACompilationUnitImpl();
    return maCompilationUnit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Component createComponent()
  {
    ComponentImpl component = new ComponentImpl();
    return component;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Signature createSignature()
  {
    SignatureImpl signature = new SignatureImpl();
    return signature;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Parameters createParameters()
  {
    ParametersImpl parameters = new ParametersImpl();
    return parameters;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComponentType createComponentType()
  {
    ComponentTypeImpl componentType = new ComponentTypeImpl();
    return componentType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Parameter createParameter()
  {
    ParameterImpl parameter = new ParameterImpl();
    return parameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArcElement createArcElement()
  {
    ArcElementImpl arcElement = new ArcElementImpl();
    return arcElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SubComponent createSubComponent()
  {
    SubComponentImpl subComponent = new SubComponentImpl();
    return subComponent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Connector createConnector()
  {
    ConnectorImpl connector = new ConnectorImpl();
    return connector;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Ports createPorts()
  {
    PortsImpl ports = new PortsImpl();
    return ports;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Port createPort()
  {
    PortImpl port = new PortImpl();
    return port;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Assume createAssume()
  {
    AssumeImpl assume = new AssumeImpl();
    return assume;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Names createNames()
  {
    NamesImpl names = new NamesImpl();
    return names;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Variable createVariable()
  {
    VariableImpl variable = new VariableImpl();
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Automaton createAutomaton()
  {
    AutomatonImpl automaton = new AutomatonImpl();
    return automaton;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public State createState()
  {
    StateImpl state = new StateImpl();
    return state;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SCState createSCState()
  {
    SCStateImpl scState = new SCStateImpl();
    return scState;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InvState createInvState()
  {
    InvStateImpl invState = new InvStateImpl();
    return invState;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SCSAnte createSCSAnte()
  {
    SCSAnteImpl scsAnte = new SCSAnteImpl();
    return scsAnte;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Transition createTransition()
  {
    TransitionImpl transition = new TransitionImpl();
    return transition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Block createBlock()
  {
    BlockImpl block = new BlockImpl();
    return block;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BlockStatement createBlockStatement()
  {
    BlockStatementImpl blockStatement = new BlockStatementImpl();
    return blockStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SimpleExpression createSimpleExpression()
  {
    SimpleExpressionImpl simpleExpression = new SimpleExpressionImpl();
    return simpleExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SimpleInit createSimpleInit()
  {
    SimpleInitImpl simpleInit = new SimpleInitImpl();
    return simpleInit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SCModifier createSCModifierFromString(EDataType eDataType, String initialValue)
  {
    SCModifier result = SCModifier.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertSCModifierToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MontiArcDSLPackage getMontiArcDSLPackage()
  {
    return (MontiArcDSLPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static MontiArcDSLPackage getPackage()
  {
    return MontiArcDSLPackage.eINSTANCE;
  }

} //MontiArcDSLFactoryImpl
