/*
 * generated by Xtext 2.34.0
 */
package org.palladiosimulator.xtext.motiarc.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.palladiosimulator.xtext.motiarc.mcBasics.Argument;
import org.palladiosimulator.xtext.motiarc.mcBasics.Arguments;
import org.palladiosimulator.xtext.motiarc.mcBasics.BinaryExpression;
import org.palladiosimulator.xtext.motiarc.mcBasics.ImportStatements;
import org.palladiosimulator.xtext.motiarc.mcBasics.MCCollectionType;
import org.palladiosimulator.xtext.motiarc.mcBasics.MCObjectType;
import org.palladiosimulator.xtext.motiarc.mcBasics.MCPrimitiveType;
import org.palladiosimulator.xtext.motiarc.mcBasics.MCVoidType;
import org.palladiosimulator.xtext.motiarc.mcBasics.McBasicsPackage;
import org.palladiosimulator.xtext.motiarc.mcBasics.NameExpression;
import org.palladiosimulator.xtext.motiarc.mcBasics.NumberLiteral;
import org.palladiosimulator.xtext.motiarc.mcBasics.StringLiteral;
import org.palladiosimulator.xtext.motiarc.montiCoreCD.CDClass;
import org.palladiosimulator.xtext.motiarc.montiCoreCD.CDEnum;
import org.palladiosimulator.xtext.motiarc.montiCoreCD.ClassDiagram;
import org.palladiosimulator.xtext.motiarc.montiCoreCD.ClassDiagramCompilationUnit;
import org.palladiosimulator.xtext.motiarc.montiCoreCD.Member;
import org.palladiosimulator.xtext.motiarc.montiCoreCD.MontiCoreCDPackage;
import org.palladiosimulator.xtext.motiarc.services.MontiCoreClassDiagramGrammarAccess;

@SuppressWarnings("all")
public class MontiCoreClassDiagramSemanticSequencer extends MCBasicsSemanticSequencer {

	@Inject
	private MontiCoreClassDiagramGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == McBasicsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case McBasicsPackage.ARGUMENT:
				sequence_Argument(context, (Argument) semanticObject); 
				return; 
			case McBasicsPackage.ARGUMENTS:
				sequence_Arguments(context, (Arguments) semanticObject); 
				return; 
			case McBasicsPackage.BINARY_EXPRESSION:
				sequence_BinaryExpression(context, (BinaryExpression) semanticObject); 
				return; 
			case McBasicsPackage.IMPORT_STATEMENTS:
				sequence_ImportStatements(context, (ImportStatements) semanticObject); 
				return; 
			case McBasicsPackage.MC_COLLECTION_TYPE:
				sequence_MCCollectionType(context, (MCCollectionType) semanticObject); 
				return; 
			case McBasicsPackage.MC_OBJECT_TYPE:
				sequence_MCObjectType(context, (MCObjectType) semanticObject); 
				return; 
			case McBasicsPackage.MC_PRIMITIVE_TYPE:
				sequence_MCPrimitiveType(context, (MCPrimitiveType) semanticObject); 
				return; 
			case McBasicsPackage.MC_VOID_TYPE:
				sequence_MCVoidType(context, (MCVoidType) semanticObject); 
				return; 
			case McBasicsPackage.NAME_EXPRESSION:
				sequence_NameExpression(context, (NameExpression) semanticObject); 
				return; 
			case McBasicsPackage.NUMBER_LITERAL:
				sequence_NumberLiteral(context, (NumberLiteral) semanticObject); 
				return; 
			case McBasicsPackage.PACKAGE:
				sequence_Package(context, (org.palladiosimulator.xtext.motiarc.mcBasics.Package) semanticObject); 
				return; 
			case McBasicsPackage.STRING_LITERAL:
				sequence_StringLiteral(context, (StringLiteral) semanticObject); 
				return; 
			}
		else if (epackage == MontiCoreCDPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MontiCoreCDPackage.CD_CLASS:
				sequence_CDClass(context, (CDClass) semanticObject); 
				return; 
			case MontiCoreCDPackage.CD_ENUM:
				sequence_CDEnum(context, (CDEnum) semanticObject); 
				return; 
			case MontiCoreCDPackage.CLASS_DIAGRAM:
				sequence_ClassDiagram(context, (ClassDiagram) semanticObject); 
				return; 
			case MontiCoreCDPackage.CLASS_DIAGRAM_COMPILATION_UNIT:
				sequence_ClassDiagramCompilationUnit(context, (ClassDiagramCompilationUnit) semanticObject); 
				return; 
			case MontiCoreCDPackage.MEMBER:
				sequence_Member(context, (Member) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     CDDefinition returns CDClass
	 *     CDClass returns CDClass
	 *
	 * Constraint:
	 *     (public?='public'? name=ID extends=ID? (implements+=ID implements+=ID*)? members+=Member)
	 * </pre>
	 */
	protected void sequence_CDClass(ISerializationContext context, CDClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     CDDefinition returns CDEnum
	 *     CDEnum returns CDEnum
	 *
	 * Constraint:
	 *     (public?='public'? name=ID values+=ID)
	 * </pre>
	 */
	protected void sequence_CDEnum(ISerializationContext context, CDEnum semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ClassDiagramCompilationUnit returns ClassDiagramCompilationUnit
	 *
	 * Constraint:
	 *     (package=Package importStatements+=ImportStatements* diagram=ClassDiagram)
	 * </pre>
	 */
	protected void sequence_ClassDiagramCompilationUnit(ISerializationContext context, ClassDiagramCompilationUnit semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ClassDiagram returns ClassDiagram
	 *
	 * Constraint:
	 *     (name=ID cdElements+=CDDefinition*)
	 * </pre>
	 */
	protected void sequence_ClassDiagram(ISerializationContext context, ClassDiagram semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Member returns Member
	 *
	 * Constraint:
	 *     ((type=Type | type=CDDefinition) name=ID)
	 * </pre>
	 */
	protected void sequence_Member(ISerializationContext context, Member semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
