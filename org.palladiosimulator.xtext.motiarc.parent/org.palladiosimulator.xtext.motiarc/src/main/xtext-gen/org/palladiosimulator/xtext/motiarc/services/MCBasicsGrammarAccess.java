/*
 * generated by Xtext 2.34.0
 */
package org.palladiosimulator.xtext.motiarc.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MCBasicsGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ImportStatementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.motiarc.MCBasics.ImportStatements");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportUriAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportUriMCQUALIFIEDNAMETerminalRuleCall_1_0 = (RuleCall)cImportUriAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cStarAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Keyword cStarAsteriskKeyword_2_1_0 = (Keyword)cStarAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ImportStatements:
		//    'import' importUri=MCQUALIFIEDNAME ('.' star='*')? ";"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importUri=MCQUALIFIEDNAME ('.' star='*')? ";"
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importUri=MCQUALIFIEDNAME
		public Assignment getImportUriAssignment_1() { return cImportUriAssignment_1; }
		
		//MCQUALIFIEDNAME
		public RuleCall getImportUriMCQUALIFIEDNAMETerminalRuleCall_1_0() { return cImportUriMCQUALIFIEDNAMETerminalRuleCall_1_0; }
		
		//('.' star='*')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'.'
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }
		
		//star='*'
		public Assignment getStarAssignment_2_1() { return cStarAssignment_2_1; }
		
		//'*'
		public Keyword getStarAsteriskKeyword_2_1_0() { return cStarAsteriskKeyword_2_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class PackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.motiarc.MCBasics.Package");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameMCQUALIFIEDNAMETerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Package:
		//    'package' name=MCQUALIFIEDNAME ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'package' name=MCQUALIFIEDNAME ';'
		public Group getGroup() { return cGroup; }
		
		//'package'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//name=MCQUALIFIEDNAME
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//MCQUALIFIEDNAME
		public RuleCall getNameMCQUALIFIEDNAMETerminalRuleCall_1_0() { return cNameMCQUALIFIEDNAMETerminalRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.motiarc.MCBasics.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMCPrimitiveTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMCArrayTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Type:
		//    MCPrimitiveType | MCArrayType
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//MCPrimitiveType | MCArrayType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MCPrimitiveType
		public RuleCall getMCPrimitiveTypeParserRuleCall_0() { return cMCPrimitiveTypeParserRuleCall_0; }
		
		//MCArrayType
		public RuleCall getMCArrayTypeParserRuleCall_1() { return cMCArrayTypeParserRuleCall_1; }
	}
	public class MCPrimitiveTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.motiarc.MCBasics.MCPrimitiveType");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTypeAlternatives_0 = (Alternatives)cTypeAssignment.eContents().get(0);
		private final Keyword cTypeBooleanKeyword_0_0 = (Keyword)cTypeAlternatives_0.eContents().get(0);
		private final Keyword cTypeByteKeyword_0_1 = (Keyword)cTypeAlternatives_0.eContents().get(1);
		private final Keyword cTypeShortKeyword_0_2 = (Keyword)cTypeAlternatives_0.eContents().get(2);
		private final Keyword cTypeIntKeyword_0_3 = (Keyword)cTypeAlternatives_0.eContents().get(3);
		private final Keyword cTypeLongKeyword_0_4 = (Keyword)cTypeAlternatives_0.eContents().get(4);
		private final Keyword cTypeCharKeyword_0_5 = (Keyword)cTypeAlternatives_0.eContents().get(5);
		private final Keyword cTypeFloatKeyword_0_6 = (Keyword)cTypeAlternatives_0.eContents().get(6);
		private final Keyword cTypeDoubleKeyword_0_7 = (Keyword)cTypeAlternatives_0.eContents().get(7);
		
		//MCPrimitiveType:
		//     type = ( 'boolean' | 'byte' | 'short' | 'int'
		//                  | 'long' | 'char' |'float' | 'double' )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type = ( 'boolean' | 'byte' | 'short' | 'int'
		//             | 'long' | 'char' |'float' | 'double' )
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//( 'boolean' | 'byte' | 'short' | 'int'
		//                 | 'long' | 'char' |'float' | 'double' )
		public Alternatives getTypeAlternatives_0() { return cTypeAlternatives_0; }
		
		//'boolean'
		public Keyword getTypeBooleanKeyword_0_0() { return cTypeBooleanKeyword_0_0; }
		
		//'byte'
		public Keyword getTypeByteKeyword_0_1() { return cTypeByteKeyword_0_1; }
		
		//'short'
		public Keyword getTypeShortKeyword_0_2() { return cTypeShortKeyword_0_2; }
		
		//'int'
		public Keyword getTypeIntKeyword_0_3() { return cTypeIntKeyword_0_3; }
		
		//'long'
		public Keyword getTypeLongKeyword_0_4() { return cTypeLongKeyword_0_4; }
		
		//'char'
		public Keyword getTypeCharKeyword_0_5() { return cTypeCharKeyword_0_5; }
		
		//'float'
		public Keyword getTypeFloatKeyword_0_6() { return cTypeFloatKeyword_0_6; }
		
		//'double'
		public Keyword getTypeDoubleKeyword_0_7() { return cTypeDoubleKeyword_0_7; }
	}
	public class MCArrayTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.motiarc.MCBasics.MCArrayType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMCPrimitiveTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//MCArrayType:
		//    MCPrimitiveType'['']'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//MCPrimitiveType'['']'
		public Group getGroup() { return cGroup; }
		
		//MCPrimitiveType
		public RuleCall getMCPrimitiveTypeParserRuleCall_0() { return cMCPrimitiveTypeParserRuleCall_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.motiarc.MCBasics.Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExpKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Expression:
		//    'exp' name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'exp' name=ID
		public Group getGroup() { return cGroup; }
		
		//'exp'
		public Keyword getExpKeyword_0() { return cExpKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class ArgumentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.motiarc.MCBasics.Arguments");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArgKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Arguments:
		//    'arg' name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'arg' name=ID
		public Group getGroup() { return cGroup; }
		
		//'arg'
		public Keyword getArgKeyword_0() { return cArgKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	
	
	private final ImportStatementsElements pImportStatements;
	private final PackageElements pPackage;
	private final TypeElements pType;
	private final MCPrimitiveTypeElements pMCPrimitiveType;
	private final MCArrayTypeElements pMCArrayType;
	private final ExpressionElements pExpression;
	private final ArgumentsElements pArguments;
	private final TerminalRule tMCQUALIFIEDNAME;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MCBasicsGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pImportStatements = new ImportStatementsElements();
		this.pPackage = new PackageElements();
		this.pType = new TypeElements();
		this.pMCPrimitiveType = new MCPrimitiveTypeElements();
		this.pMCArrayType = new MCArrayTypeElements();
		this.pExpression = new ExpressionElements();
		this.pArguments = new ArgumentsElements();
		this.tMCQUALIFIEDNAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.motiarc.MCBasics.MCQUALIFIEDNAME");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.palladiosimulator.xtext.motiarc.MCBasics".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ImportStatements:
	//    'import' importUri=MCQUALIFIEDNAME ('.' star='*')? ";"
	//;
	public ImportStatementsElements getImportStatementsAccess() {
		return pImportStatements;
	}
	
	public ParserRule getImportStatementsRule() {
		return getImportStatementsAccess().getRule();
	}
	
	//Package:
	//    'package' name=MCQUALIFIEDNAME ';'
	//;
	public PackageElements getPackageAccess() {
		return pPackage;
	}
	
	public ParserRule getPackageRule() {
		return getPackageAccess().getRule();
	}
	
	//Type:
	//    MCPrimitiveType | MCArrayType
	//;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//MCPrimitiveType:
	//     type = ( 'boolean' | 'byte' | 'short' | 'int'
	//                  | 'long' | 'char' |'float' | 'double' )
	//;
	public MCPrimitiveTypeElements getMCPrimitiveTypeAccess() {
		return pMCPrimitiveType;
	}
	
	public ParserRule getMCPrimitiveTypeRule() {
		return getMCPrimitiveTypeAccess().getRule();
	}
	
	//MCArrayType:
	//    MCPrimitiveType'['']'
	//;
	public MCArrayTypeElements getMCArrayTypeAccess() {
		return pMCArrayType;
	}
	
	public ParserRule getMCArrayTypeRule() {
		return getMCArrayTypeAccess().getRule();
	}
	
	//Expression:
	//    'exp' name=ID
	//;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Arguments:
	//    'arg' name=ID
	//;
	public ArgumentsElements getArgumentsAccess() {
		return pArguments;
	}
	
	public ParserRule getArgumentsRule() {
		return getArgumentsAccess().getRule();
	}
	
	//terminal MCQUALIFIEDNAME:
	//    ID ('.' ID)+
	//;
	public TerminalRule getMCQUALIFIEDNAMERule() {
		return tMCQUALIFIEDNAME;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
