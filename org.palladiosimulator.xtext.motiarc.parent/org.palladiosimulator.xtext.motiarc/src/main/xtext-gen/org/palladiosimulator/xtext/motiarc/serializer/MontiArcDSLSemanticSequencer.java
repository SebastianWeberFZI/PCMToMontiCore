/*
 * generated by Xtext 2.34.0
 */
package org.palladiosimulator.xtext.motiarc.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.palladiosimulator.xtext.motiarc.mcBasics.Argument;
import org.palladiosimulator.xtext.motiarc.mcBasics.Arguments;
import org.palladiosimulator.xtext.motiarc.mcBasics.BinaryExpression;
import org.palladiosimulator.xtext.motiarc.mcBasics.ImportStatements;
import org.palladiosimulator.xtext.motiarc.mcBasics.MCCollectionType;
import org.palladiosimulator.xtext.motiarc.mcBasics.MCObjectType;
import org.palladiosimulator.xtext.motiarc.mcBasics.MCPrimitiveType;
import org.palladiosimulator.xtext.motiarc.mcBasics.MCVoidType;
import org.palladiosimulator.xtext.motiarc.mcBasics.McBasicsPackage;
import org.palladiosimulator.xtext.motiarc.mcBasics.NameExpression;
import org.palladiosimulator.xtext.motiarc.mcBasics.NumberLiteral;
import org.palladiosimulator.xtext.motiarc.mcBasics.StringLiteral;
import org.palladiosimulator.xtext.motiarc.montiArcDSL.Automaton;
import org.palladiosimulator.xtext.motiarc.montiArcDSL.Block;
import org.palladiosimulator.xtext.motiarc.montiArcDSL.Component;
import org.palladiosimulator.xtext.motiarc.montiArcDSL.ComponentType;
import org.palladiosimulator.xtext.motiarc.montiArcDSL.Connector;
import org.palladiosimulator.xtext.motiarc.montiArcDSL.InvState;
import org.palladiosimulator.xtext.motiarc.montiArcDSL.MACompilationUnit;
import org.palladiosimulator.xtext.motiarc.montiArcDSL.MontiArcDSLPackage;
import org.palladiosimulator.xtext.motiarc.montiArcDSL.Names;
import org.palladiosimulator.xtext.motiarc.montiArcDSL.Parameters;
import org.palladiosimulator.xtext.motiarc.montiArcDSL.Port;
import org.palladiosimulator.xtext.motiarc.montiArcDSL.Ports;
import org.palladiosimulator.xtext.motiarc.montiArcDSL.SCSAnte;
import org.palladiosimulator.xtext.motiarc.montiArcDSL.SCState;
import org.palladiosimulator.xtext.motiarc.montiArcDSL.Signature;
import org.palladiosimulator.xtext.motiarc.montiArcDSL.SimpleExpression;
import org.palladiosimulator.xtext.motiarc.montiArcDSL.SimpleInit;
import org.palladiosimulator.xtext.motiarc.montiArcDSL.SubComponent;
import org.palladiosimulator.xtext.motiarc.montiArcDSL.Transition;
import org.palladiosimulator.xtext.motiarc.montiArcDSL.Variable;
import org.palladiosimulator.xtext.motiarc.services.MontiArcDSLGrammarAccess;

@SuppressWarnings("all")
public class MontiArcDSLSemanticSequencer extends MCBasicsSemanticSequencer {

	@Inject
	private MontiArcDSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == McBasicsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case McBasicsPackage.ARGUMENT:
				sequence_Argument(context, (Argument) semanticObject); 
				return; 
			case McBasicsPackage.ARGUMENTS:
				sequence_Arguments(context, (Arguments) semanticObject); 
				return; 
			case McBasicsPackage.BINARY_EXPRESSION:
				sequence_BinaryExpression(context, (BinaryExpression) semanticObject); 
				return; 
			case McBasicsPackage.IMPORT_STATEMENTS:
				sequence_ImportStatements(context, (ImportStatements) semanticObject); 
				return; 
			case McBasicsPackage.MC_COLLECTION_TYPE:
				sequence_MCCollectionType(context, (MCCollectionType) semanticObject); 
				return; 
			case McBasicsPackage.MC_OBJECT_TYPE:
				sequence_MCObjectType(context, (MCObjectType) semanticObject); 
				return; 
			case McBasicsPackage.MC_PRIMITIVE_TYPE:
				sequence_MCPrimitiveType(context, (MCPrimitiveType) semanticObject); 
				return; 
			case McBasicsPackage.MC_VOID_TYPE:
				sequence_MCVoidType(context, (MCVoidType) semanticObject); 
				return; 
			case McBasicsPackage.NAME_EXPRESSION:
				sequence_NameExpression(context, (NameExpression) semanticObject); 
				return; 
			case McBasicsPackage.NUMBER_LITERAL:
				sequence_NumberLiteral(context, (NumberLiteral) semanticObject); 
				return; 
			case McBasicsPackage.PACKAGE:
				sequence_Package(context, (org.palladiosimulator.xtext.motiarc.mcBasics.Package) semanticObject); 
				return; 
			case McBasicsPackage.STRING_LITERAL:
				sequence_StringLiteral(context, (StringLiteral) semanticObject); 
				return; 
			}
		else if (epackage == MontiArcDSLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MontiArcDSLPackage.AUTOMATON:
				sequence_Automaton(context, (Automaton) semanticObject); 
				return; 
			case MontiArcDSLPackage.BLOCK:
				sequence_Block(context, (Block) semanticObject); 
				return; 
			case MontiArcDSLPackage.COMPONENT:
				sequence_Component(context, (Component) semanticObject); 
				return; 
			case MontiArcDSLPackage.COMPONENT_TYPE:
				sequence_ComponentType(context, (ComponentType) semanticObject); 
				return; 
			case MontiArcDSLPackage.CONNECTOR:
				sequence_Connector(context, (Connector) semanticObject); 
				return; 
			case MontiArcDSLPackage.INV_STATE:
				sequence_InvState(context, (InvState) semanticObject); 
				return; 
			case MontiArcDSLPackage.MA_COMPILATION_UNIT:
				sequence_MACompilationUnit(context, (MACompilationUnit) semanticObject); 
				return; 
			case MontiArcDSLPackage.NAMES:
				sequence_Names(context, (Names) semanticObject); 
				return; 
			case MontiArcDSLPackage.PARAMETER:
				sequence_Parameter(context, (org.palladiosimulator.xtext.motiarc.montiArcDSL.Parameter) semanticObject); 
				return; 
			case MontiArcDSLPackage.PARAMETERS:
				sequence_Parameters(context, (Parameters) semanticObject); 
				return; 
			case MontiArcDSLPackage.PORT:
				sequence_Port(context, (Port) semanticObject); 
				return; 
			case MontiArcDSLPackage.PORTS:
				sequence_Ports(context, (Ports) semanticObject); 
				return; 
			case MontiArcDSLPackage.SCS_ANTE:
				sequence_SCSAnte(context, (SCSAnte) semanticObject); 
				return; 
			case MontiArcDSLPackage.SC_STATE:
				sequence_SCState(context, (SCState) semanticObject); 
				return; 
			case MontiArcDSLPackage.SIGNATURE:
				sequence_Signature(context, (Signature) semanticObject); 
				return; 
			case MontiArcDSLPackage.SIMPLE_EXPRESSION:
				sequence_SimpleExpression(context, (SimpleExpression) semanticObject); 
				return; 
			case MontiArcDSLPackage.SIMPLE_INIT:
				sequence_SimpleInit(context, (SimpleInit) semanticObject); 
				return; 
			case MontiArcDSLPackage.SUB_COMPONENT:
				sequence_SubComponent(context, (SubComponent) semanticObject); 
				return; 
			case MontiArcDSLPackage.TRANSITION:
				sequence_Transition(context, (Transition) semanticObject); 
				return; 
			case MontiArcDSLPackage.VARIABLE:
				sequence_Variable(context, (Variable) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     ArcElement returns Automaton
	 *     Automaton returns Automaton
	 *
	 * Constraint:
	 *     (sync?=SYNC? name?=ID? (states+=State | transitions+=Transition)*)
	 * </pre>
	 */
	protected void sequence_Automaton(ISerializationContext context, Automaton semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Block returns Block
	 *
	 * Constraint:
	 *     blocks+=BlockStatement*
	 * </pre>
	 */
	protected void sequence_Block(ISerializationContext context, Block semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ComponentType returns ComponentType
	 *
	 * Constraint:
	 *     type=[Component|ID]
	 * </pre>
	 */
	protected void sequence_ComponentType(ISerializationContext context, ComponentType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MontiArcDSLPackage.Literals.COMPONENT_TYPE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MontiArcDSLPackage.Literals.COMPONENT_TYPE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getComponentTypeAccess().getTypeComponentIDTerminalRuleCall_0_1(), semanticObject.eGet(MontiArcDSLPackage.Literals.COMPONENT_TYPE__TYPE, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Component returns Component
	 *     ArcElement returns Component
	 *
	 * Constraint:
	 *     (name=ID signature=Signature arcElements+=ArcElement*)
	 * </pre>
	 */
	protected void sequence_Component(ISerializationContext context, Component semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ArcElement returns Connector
	 *     Connector returns Connector
	 *
	 * Constraint:
	 *     ((source=ID | source=MCQUALIFIEDNAME) targets=Names)
	 * </pre>
	 */
	protected void sequence_Connector(ISerializationContext context, Connector semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     State returns InvState
	 *     InvState returns InvState
	 *
	 * Constraint:
	 *     (modifier+=SCModifier* name=ID expression=Expression)
	 * </pre>
	 */
	protected void sequence_InvState(ISerializationContext context, InvState semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MACompilationUnit returns MACompilationUnit
	 *
	 * Constraint:
	 *     (package=Package importStatements+=ImportStatements* component=Component)
	 * </pre>
	 */
	protected void sequence_MACompilationUnit(ISerializationContext context, MACompilationUnit semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Names returns Names
	 *
	 * Constraint:
	 *     ((names+=ID | names+=MCQUALIFIEDNAME) names+=ID? (names+=MCQUALIFIEDNAME? names+=ID?)*)
	 * </pre>
	 */
	protected void sequence_Names(ISerializationContext context, Names semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Parameter returns Parameter
	 *
	 * Constraint:
	 *     (type=Type name=ID expression?=Expression?)
	 * </pre>
	 */
	protected void sequence_Parameter(ISerializationContext context, org.palladiosimulator.xtext.motiarc.montiArcDSL.Parameter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Parameters returns Parameters
	 *
	 * Constraint:
	 *     (parameters+=Parameter parameters+=Parameter*)
	 * </pre>
	 */
	protected void sequence_Parameters(ISerializationContext context, Parameters semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Port returns Port
	 *
	 * Constraint:
	 *     (sync?=SYNC? (in?='in' | out?='out') (type=Type | datatype=[CDDefinition|ID]) names?=Names?)
	 * </pre>
	 */
	protected void sequence_Port(ISerializationContext context, Port semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ArcElement returns Ports
	 *     Ports returns Ports
	 *
	 * Constraint:
	 *     (ports+=Port ports+=Port*)
	 * </pre>
	 */
	protected void sequence_Ports(ISerializationContext context, Ports semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     SCSAnte returns SCSAnte
	 *
	 * Constraint:
	 *     block=Block
	 * </pre>
	 */
	protected void sequence_SCSAnte(ISerializationContext context, SCSAnte semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MontiArcDSLPackage.Literals.SCS_ANTE__BLOCK) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MontiArcDSLPackage.Literals.SCS_ANTE__BLOCK));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSCSAnteAccess().getBlockBlockParserRuleCall_1_0(), semanticObject.getBlock());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     State returns SCState
	 *     SCState returns SCState
	 *
	 * Constraint:
	 *     (modifier+=SCModifier* ante=SCSAnte? name=ID)
	 * </pre>
	 */
	protected void sequence_SCState(ISerializationContext context, SCState semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Signature returns Signature
	 *
	 * Constraint:
	 *     (parameters?=Parameters? type?=Type?)
	 * </pre>
	 */
	protected void sequence_Signature(ISerializationContext context, Signature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     BlockStatement returns SimpleExpression
	 *     SimpleExpression returns SimpleExpression
	 *
	 * Constraint:
	 *     expression=Expression
	 * </pre>
	 */
	protected void sequence_SimpleExpression(ISerializationContext context, SimpleExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MontiArcDSLPackage.Literals.SIMPLE_EXPRESSION__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MontiArcDSLPackage.Literals.SIMPLE_EXPRESSION__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSimpleExpressionAccess().getExpressionExpressionParserRuleCall_0_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     BlockStatement returns SimpleInit
	 *     SimpleInit returns SimpleInit
	 *
	 * Constraint:
	 *     (name=ID expressions+=Expression)
	 * </pre>
	 */
	protected void sequence_SimpleInit(ISerializationContext context, SimpleInit semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ArcElement returns SubComponent
	 *     SubComponent returns SubComponent
	 *
	 * Constraint:
	 *     (type=Type arguments?=Arguments? instances=Names)
	 * </pre>
	 */
	protected void sequence_SubComponent(ISerializationContext context, SubComponent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Transition returns Transition
	 *
	 * Constraint:
	 *     (source=[State|ID] target=[State|ID]? expression=Expression? reaction=Block?)
	 * </pre>
	 */
	protected void sequence_Transition(ISerializationContext context, Transition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ArcElement returns Variable
	 *     Variable returns Variable
	 *
	 * Constraint:
	 *     ((type=Type | type=ComponentType) names?=Names? (parameters+=Expression parameters+=Expression*)?)
	 * </pre>
	 */
	protected void sequence_Variable(ISerializationContext context, Variable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
