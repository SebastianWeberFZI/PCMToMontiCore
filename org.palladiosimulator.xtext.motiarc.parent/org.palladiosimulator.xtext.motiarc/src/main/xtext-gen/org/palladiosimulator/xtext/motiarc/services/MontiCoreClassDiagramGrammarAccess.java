/*
 * generated by Xtext 2.34.0
 */
package org.palladiosimulator.xtext.motiarc.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MontiCoreClassDiagramGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ClassDiagramCompilationUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.motiarc.MontiCoreClassDiagram.ClassDiagramCompilationUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPackageAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPackagePackageParserRuleCall_0_0 = (RuleCall)cPackageAssignment_0.eContents().get(0);
		private final Assignment cImportStatementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportStatementsImportStatementsParserRuleCall_1_0 = (RuleCall)cImportStatementsAssignment_1.eContents().get(0);
		private final Assignment cDiagramAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDiagramClassDiagramParserRuleCall_2_0 = (RuleCall)cDiagramAssignment_2.eContents().get(0);
		
		//ClassDiagramCompilationUnit:
		//    package=Package importStatements+=ImportStatements*
		//    diagram=ClassDiagram;
		@Override public ParserRule getRule() { return rule; }
		
		//package=Package importStatements+=ImportStatements*
		//diagram=ClassDiagram
		public Group getGroup() { return cGroup; }
		
		//package=Package
		public Assignment getPackageAssignment_0() { return cPackageAssignment_0; }
		
		//Package
		public RuleCall getPackagePackageParserRuleCall_0_0() { return cPackagePackageParserRuleCall_0_0; }
		
		//importStatements+=ImportStatements*
		public Assignment getImportStatementsAssignment_1() { return cImportStatementsAssignment_1; }
		
		//ImportStatements
		public RuleCall getImportStatementsImportStatementsParserRuleCall_1_0() { return cImportStatementsImportStatementsParserRuleCall_1_0; }
		
		//diagram=ClassDiagram
		public Assignment getDiagramAssignment_2() { return cDiagramAssignment_2; }
		
		//ClassDiagram
		public RuleCall getDiagramClassDiagramParserRuleCall_2_0() { return cDiagramClassDiagramParserRuleCall_2_0; }
	}
	public class ClassDiagramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.motiarc.MontiCoreClassDiagram.ClassDiagram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassdiagramKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCdElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCdElementsCDDefinitionParserRuleCall_3_0 = (RuleCall)cCdElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// ClassDiagram Head
		//ClassDiagram:
		//    "classdiagram" name=ID
		//    "{" cdElements+=CDDefinition* "}"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"classdiagram" name=ID
		//"{" cdElements+=CDDefinition* "}"
		public Group getGroup() { return cGroup; }
		
		//"classdiagram"
		public Keyword getClassdiagramKeyword_0() { return cClassdiagramKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//cdElements+=CDDefinition*
		public Assignment getCdElementsAssignment_3() { return cCdElementsAssignment_3; }
		
		//CDDefinition
		public RuleCall getCdElementsCDDefinitionParserRuleCall_3_0() { return cCdElementsCDDefinitionParserRuleCall_3_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class CDDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.motiarc.MontiCoreClassDiagram.CDDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCDClassParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCDEnumParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//CDDefinition:
		//    CDClass | CDEnum;
		@Override public ParserRule getRule() { return rule; }
		
		//CDClass | CDEnum
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CDClass
		public RuleCall getCDClassParserRuleCall_0() { return cCDClassParserRuleCall_0; }
		
		//CDEnum
		public RuleCall getCDEnumParserRuleCall_1() { return cCDEnumParserRuleCall_1; }
	}
	public class CDClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.motiarc.MontiCoreClassDiagram.CDClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPublicAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cPublicPublicKeyword_0_0 = (Keyword)cPublicAssignment_0.eContents().get(0);
		private final Keyword cClassKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExtendsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExtendsIDTerminalRuleCall_3_1_0 = (RuleCall)cExtendsAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cImplementsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cImplementsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cImplementsIDTerminalRuleCall_4_1_0 = (RuleCall)cImplementsAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cImplementsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cImplementsIDTerminalRuleCall_4_2_1_0 = (RuleCall)cImplementsAssignment_4_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cMembersAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMembersMemberParserRuleCall_6_0 = (RuleCall)cMembersAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//// Class Diagram Body Elements
		//CDClass:
		//    (public?='public')? 'class' name=ID ('extends' extends=ID)? ('implements' implements+=ID (','implements+=ID)*)?'{'
		//        members+=Member
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(public?='public')? 'class' name=ID ('extends' extends=ID)? ('implements' implements+=ID (','implements+=ID)*)?'{'
		//    members+=Member
		//'}'
		public Group getGroup() { return cGroup; }
		
		//(public?='public')?
		public Assignment getPublicAssignment_0() { return cPublicAssignment_0; }
		
		//'public'
		public Keyword getPublicPublicKeyword_0_0() { return cPublicPublicKeyword_0_0; }
		
		//'class'
		public Keyword getClassKeyword_1() { return cClassKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('extends' extends=ID)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'extends'
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }
		
		//extends=ID
		public Assignment getExtendsAssignment_3_1() { return cExtendsAssignment_3_1; }
		
		//ID
		public RuleCall getExtendsIDTerminalRuleCall_3_1_0() { return cExtendsIDTerminalRuleCall_3_1_0; }
		
		//('implements' implements+=ID (','implements+=ID)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'implements'
		public Keyword getImplementsKeyword_4_0() { return cImplementsKeyword_4_0; }
		
		//implements+=ID
		public Assignment getImplementsAssignment_4_1() { return cImplementsAssignment_4_1; }
		
		//ID
		public RuleCall getImplementsIDTerminalRuleCall_4_1_0() { return cImplementsIDTerminalRuleCall_4_1_0; }
		
		//(','implements+=ID)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//','
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//implements+=ID
		public Assignment getImplementsAssignment_4_2_1() { return cImplementsAssignment_4_2_1; }
		
		//ID
		public RuleCall getImplementsIDTerminalRuleCall_4_2_1_0() { return cImplementsIDTerminalRuleCall_4_2_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//members+=Member
		public Assignment getMembersAssignment_6() { return cMembersAssignment_6; }
		
		//Member
		public RuleCall getMembersMemberParserRuleCall_6_0() { return cMembersMemberParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class CDEnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.motiarc.MontiCoreClassDiagram.CDEnum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPublicAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cPublicPublicKeyword_0_0 = (Keyword)cPublicAssignment_0.eContents().get(0);
		private final Keyword cEnumKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValuesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValuesIDTerminalRuleCall_4_0 = (RuleCall)cValuesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//CDEnum:
		//    (public?='public')? 'enum' name=ID '{'
		//        values+=ID
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(public?='public')? 'enum' name=ID '{'
		//    values+=ID
		//'}'
		public Group getGroup() { return cGroup; }
		
		//(public?='public')?
		public Assignment getPublicAssignment_0() { return cPublicAssignment_0; }
		
		//'public'
		public Keyword getPublicPublicKeyword_0_0() { return cPublicPublicKeyword_0_0; }
		
		//'enum'
		public Keyword getEnumKeyword_1() { return cEnumKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//values+=ID
		public Assignment getValuesAssignment_4() { return cValuesAssignment_4; }
		
		//ID
		public RuleCall getValuesIDTerminalRuleCall_4_0() { return cValuesIDTerminalRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class MemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.motiarc.MontiCoreClassDiagram.Member");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cTypeAlternatives_0_0 = (Alternatives)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0_0 = (RuleCall)cTypeAlternatives_0_0.eContents().get(0);
		private final RuleCall cTypeCDDefinitionParserRuleCall_0_0_1 = (RuleCall)cTypeAlternatives_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Member:
		//    type=(Type|CDDefinition) name=ID ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type=(Type|CDDefinition) name=ID ';'
		public Group getGroup() { return cGroup; }
		
		//type=(Type|CDDefinition)
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//(Type|CDDefinition)
		public Alternatives getTypeAlternatives_0_0() { return cTypeAlternatives_0_0; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0_0() { return cTypeTypeParserRuleCall_0_0_0; }
		
		//CDDefinition
		public RuleCall getTypeCDDefinitionParserRuleCall_0_0_1() { return cTypeCDDefinitionParserRuleCall_0_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	
	
	private final ClassDiagramCompilationUnitElements pClassDiagramCompilationUnit;
	private final ClassDiagramElements pClassDiagram;
	private final CDDefinitionElements pCDDefinition;
	private final CDClassElements pCDClass;
	private final CDEnumElements pCDEnum;
	private final MemberElements pMember;
	
	private final Grammar grammar;
	
	private final MCBasicsGrammarAccess gaMCBasics;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MontiCoreClassDiagramGrammarAccess(GrammarProvider grammarProvider,
			MCBasicsGrammarAccess gaMCBasics,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaMCBasics = gaMCBasics;
		this.gaTerminals = gaTerminals;
		this.pClassDiagramCompilationUnit = new ClassDiagramCompilationUnitElements();
		this.pClassDiagram = new ClassDiagramElements();
		this.pCDDefinition = new CDDefinitionElements();
		this.pCDClass = new CDClassElements();
		this.pCDEnum = new CDEnumElements();
		this.pMember = new MemberElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.palladiosimulator.xtext.motiarc.MontiCoreClassDiagram".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public MCBasicsGrammarAccess getMCBasicsGrammarAccess() {
		return gaMCBasics;
	}
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ClassDiagramCompilationUnit:
	//    package=Package importStatements+=ImportStatements*
	//    diagram=ClassDiagram;
	public ClassDiagramCompilationUnitElements getClassDiagramCompilationUnitAccess() {
		return pClassDiagramCompilationUnit;
	}
	
	public ParserRule getClassDiagramCompilationUnitRule() {
		return getClassDiagramCompilationUnitAccess().getRule();
	}
	
	//// ClassDiagram Head
	//ClassDiagram:
	//    "classdiagram" name=ID
	//    "{" cdElements+=CDDefinition* "}"
	//;
	public ClassDiagramElements getClassDiagramAccess() {
		return pClassDiagram;
	}
	
	public ParserRule getClassDiagramRule() {
		return getClassDiagramAccess().getRule();
	}
	
	//CDDefinition:
	//    CDClass | CDEnum;
	public CDDefinitionElements getCDDefinitionAccess() {
		return pCDDefinition;
	}
	
	public ParserRule getCDDefinitionRule() {
		return getCDDefinitionAccess().getRule();
	}
	
	//// Class Diagram Body Elements
	//CDClass:
	//    (public?='public')? 'class' name=ID ('extends' extends=ID)? ('implements' implements+=ID (','implements+=ID)*)?'{'
	//        members+=Member
	//    '}'
	//;
	public CDClassElements getCDClassAccess() {
		return pCDClass;
	}
	
	public ParserRule getCDClassRule() {
		return getCDClassAccess().getRule();
	}
	
	//CDEnum:
	//    (public?='public')? 'enum' name=ID '{'
	//        values+=ID
	//    '}'
	//;
	public CDEnumElements getCDEnumAccess() {
		return pCDEnum;
	}
	
	public ParserRule getCDEnumRule() {
		return getCDEnumAccess().getRule();
	}
	
	//Member:
	//    type=(Type|CDDefinition) name=ID ';'
	//;
	public MemberElements getMemberAccess() {
		return pMember;
	}
	
	public ParserRule getMemberRule() {
		return getMemberAccess().getRule();
	}
	
	//ImportStatements:
	//    'import' importUri=MCQUALIFIEDNAME star?=DOTSTAR? ";"
	//;
	public MCBasicsGrammarAccess.ImportStatementsElements getImportStatementsAccess() {
		return gaMCBasics.getImportStatementsAccess();
	}
	
	public ParserRule getImportStatementsRule() {
		return getImportStatementsAccess().getRule();
	}
	
	//Package:
	//    'package' name=(MCQUALIFIEDNAME | ID)';'
	//;
	public MCBasicsGrammarAccess.PackageElements getPackageAccess() {
		return gaMCBasics.getPackageAccess();
	}
	
	public ParserRule getPackageRule() {
		return getPackageAccess().getRule();
	}
	
	//Type:
	//    MCPrimitiveType | MCArrayType | MCObjectType | MCCollectionType
	//;
	public MCBasicsGrammarAccess.TypeElements getTypeAccess() {
		return gaMCBasics.getTypeAccess();
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//MCPrimitiveType:
	//     type = ( 'boolean' | 'byte' | 'short' | 'int'
	//                  | 'long' | 'char' |'float' | 'double' )
	//;
	public MCBasicsGrammarAccess.MCPrimitiveTypeElements getMCPrimitiveTypeAccess() {
		return gaMCBasics.getMCPrimitiveTypeAccess();
	}
	
	public ParserRule getMCPrimitiveTypeRule() {
		return getMCPrimitiveTypeAccess().getRule();
	}
	
	//MCObjectType:
	//    type = ( 'Boolean' | 'Byte' | 'Integer'
	//                  | 'Long' | 'Char' |'Double' | 'String' )
	//;
	public MCBasicsGrammarAccess.MCObjectTypeElements getMCObjectTypeAccess() {
		return gaMCBasics.getMCObjectTypeAccess();
	}
	
	public ParserRule getMCObjectTypeRule() {
		return getMCObjectTypeAccess().getRule();
	}
	
	//MCVoidType:
	//    type = 'void'
	//;
	public MCBasicsGrammarAccess.MCVoidTypeElements getMCVoidTypeAccess() {
		return gaMCBasics.getMCVoidTypeAccess();
	}
	
	public ParserRule getMCVoidTypeRule() {
		return getMCVoidTypeAccess().getRule();
	}
	
	//MCCollectionType:
	//    collection = ('Set' | 'List' | 'Map' | 'Optional') '<' innerType=Type '>'
	//;
	public MCBasicsGrammarAccess.MCCollectionTypeElements getMCCollectionTypeAccess() {
		return gaMCBasics.getMCCollectionTypeAccess();
	}
	
	public ParserRule getMCCollectionTypeRule() {
		return getMCCollectionTypeAccess().getRule();
	}
	
	//MCArrayType:
	//    MCPrimitiveType'['']'
	//;
	public MCBasicsGrammarAccess.MCArrayTypeElements getMCArrayTypeAccess() {
		return gaMCBasics.getMCArrayTypeAccess();
	}
	
	public ParserRule getMCArrayTypeRule() {
		return getMCArrayTypeAccess().getRule();
	}
	
	//Expression:
	//    NameExpression | LiteralExpression | BinaryExpression
	//;
	public MCBasicsGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaMCBasics.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//LiteralExpression:
	//    NumberLiteral | StringLiteral
	//;
	public MCBasicsGrammarAccess.LiteralExpressionElements getLiteralExpressionAccess() {
		return gaMCBasics.getLiteralExpressionAccess();
	}
	
	public ParserRule getLiteralExpressionRule() {
		return getLiteralExpressionAccess().getRule();
	}
	
	//NumberLiteral:
	//  literal=INT
	//;
	public MCBasicsGrammarAccess.NumberLiteralElements getNumberLiteralAccess() {
		return gaMCBasics.getNumberLiteralAccess();
	}
	
	public ParserRule getNumberLiteralRule() {
		return getNumberLiteralAccess().getRule();
	}
	
	//StringLiteral:
	//    literal=STRING
	//;
	public MCBasicsGrammarAccess.StringLiteralElements getStringLiteralAccess() {
		return gaMCBasics.getStringLiteralAccess();
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}
	
	//NameExpression:
	//    name=ID | qualifiedname=MCQUALIFIEDNAME
	//;
	public MCBasicsGrammarAccess.NameExpressionElements getNameExpressionAccess() {
		return gaMCBasics.getNameExpressionAccess();
	}
	
	public ParserRule getNameExpressionRule() {
		return getNameExpressionAccess().getRule();
	}
	
	//BinaryExpression:
	//    literal1 = (LiteralExpression|NameExpression) op=Operator literal2= (LiteralExpression|NameExpression)
	//;
	public MCBasicsGrammarAccess.BinaryExpressionElements getBinaryExpressionAccess() {
		return gaMCBasics.getBinaryExpressionAccess();
	}
	
	public ParserRule getBinaryExpressionRule() {
		return getBinaryExpressionAccess().getRule();
	}
	
	//enum Operator:
	//    GT='>'| LT='<' | EQ='==' | BA='&&' | PLUS='+' | MINUS='-' | DIV='/' | MULT='*'
	//;
	public MCBasicsGrammarAccess.OperatorElements getOperatorAccess() {
		return gaMCBasics.getOperatorAccess();
	}
	
	public EnumRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}
	
	//Arguments:
	//    '(' arguments+=Argument (',' arguments+=Argument)* ')'
	//;
	public MCBasicsGrammarAccess.ArgumentsElements getArgumentsAccess() {
		return gaMCBasics.getArgumentsAccess();
	}
	
	public ParserRule getArgumentsRule() {
		return getArgumentsAccess().getRule();
	}
	
	//Argument:
	//    name?=ID expression=Expression
	//;
	public MCBasicsGrammarAccess.ArgumentElements getArgumentAccess() {
		return gaMCBasics.getArgumentAccess();
	}
	
	public ParserRule getArgumentRule() {
		return getArgumentAccess().getRule();
	}
	
	//terminal MCQUALIFIEDNAME returns ecore::EString:
	//    ID ('.' ID)+
	//;
	public TerminalRule getMCQUALIFIEDNAMERule() {
		return gaMCBasics.getMCQUALIFIEDNAMERule();
	}
	
	//terminal DOTSTAR:
	//    '.*'
	//;
	public TerminalRule getDOTSTARRule() {
		return gaMCBasics.getDOTSTARRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
