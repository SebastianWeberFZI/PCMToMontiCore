/*
 * generated by Xtext 2.34.0
 */
grammar InternalMCBasics;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.palladiosimulator.xtext.motiarc.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.palladiosimulator.xtext.motiarc.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.palladiosimulator.xtext.motiarc.services.MCBasicsGrammarAccess;

}

@parser::members {

 	private MCBasicsGrammarAccess grammarAccess;

    public InternalMCBasicsParser(TokenStream input, MCBasicsGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "ImportStatements";
   	}

   	@Override
   	protected MCBasicsGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleImportStatements
entryRuleImportStatements returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImportStatementsRule()); }
	iv_ruleImportStatements=ruleImportStatements
	{ $current=$iv_ruleImportStatements.current; }
	EOF;

// Rule ImportStatements
ruleImportStatements returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='import'
		{
			newLeafNode(otherlv_0, grammarAccess.getImportStatementsAccess().getImportKeyword_0());
		}
		(
			(
				lv_importUri_1_0=RULE_MCQUALIFIEDNAME
				{
					newLeafNode(lv_importUri_1_0, grammarAccess.getImportStatementsAccess().getImportUriMCQUALIFIEDNAMETerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getImportStatementsRule());
					}
					setWithLastConsumed(
						$current,
						"importUri",
						lv_importUri_1_0,
						"org.palladiosimulator.xtext.motiarc.MCBasics.MCQUALIFIEDNAME");
				}
			)
		)
		(
			otherlv_2='.'
			{
				newLeafNode(otherlv_2, grammarAccess.getImportStatementsAccess().getFullStopKeyword_2_0());
			}
			(
				(
					lv_star_3_0='*'
					{
						newLeafNode(lv_star_3_0, grammarAccess.getImportStatementsAccess().getStarAsteriskKeyword_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getImportStatementsRule());
						}
						setWithLastConsumed($current, "star", lv_star_3_0, "*");
					}
				)
			)
		)?
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getImportStatementsAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleMCPrimitiveType
entryRuleMCPrimitiveType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMCPrimitiveTypeRule()); }
	iv_ruleMCPrimitiveType=ruleMCPrimitiveType
	{ $current=$iv_ruleMCPrimitiveType.current; }
	EOF;

// Rule MCPrimitiveType
ruleMCPrimitiveType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_type_0_1='boolean'
				{
					newLeafNode(lv_type_0_1, grammarAccess.getMCPrimitiveTypeAccess().getTypeBooleanKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMCPrimitiveTypeRule());
					}
					setWithLastConsumed($current, "type", lv_type_0_1, null);
				}
				    |
				lv_type_0_2='byte'
				{
					newLeafNode(lv_type_0_2, grammarAccess.getMCPrimitiveTypeAccess().getTypeByteKeyword_0_1());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMCPrimitiveTypeRule());
					}
					setWithLastConsumed($current, "type", lv_type_0_2, null);
				}
				    |
				lv_type_0_3='short'
				{
					newLeafNode(lv_type_0_3, grammarAccess.getMCPrimitiveTypeAccess().getTypeShortKeyword_0_2());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMCPrimitiveTypeRule());
					}
					setWithLastConsumed($current, "type", lv_type_0_3, null);
				}
				    |
				lv_type_0_4='int'
				{
					newLeafNode(lv_type_0_4, grammarAccess.getMCPrimitiveTypeAccess().getTypeIntKeyword_0_3());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMCPrimitiveTypeRule());
					}
					setWithLastConsumed($current, "type", lv_type_0_4, null);
				}
				    |
				lv_type_0_5='long'
				{
					newLeafNode(lv_type_0_5, grammarAccess.getMCPrimitiveTypeAccess().getTypeLongKeyword_0_4());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMCPrimitiveTypeRule());
					}
					setWithLastConsumed($current, "type", lv_type_0_5, null);
				}
				    |
				lv_type_0_6='char'
				{
					newLeafNode(lv_type_0_6, grammarAccess.getMCPrimitiveTypeAccess().getTypeCharKeyword_0_5());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMCPrimitiveTypeRule());
					}
					setWithLastConsumed($current, "type", lv_type_0_6, null);
				}
				    |
				lv_type_0_7='float'
				{
					newLeafNode(lv_type_0_7, grammarAccess.getMCPrimitiveTypeAccess().getTypeFloatKeyword_0_6());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMCPrimitiveTypeRule());
					}
					setWithLastConsumed($current, "type", lv_type_0_7, null);
				}
				    |
				lv_type_0_8='double'
				{
					newLeafNode(lv_type_0_8, grammarAccess.getMCPrimitiveTypeAccess().getTypeDoubleKeyword_0_7());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMCPrimitiveTypeRule());
					}
					setWithLastConsumed($current, "type", lv_type_0_8, null);
				}
			)
		)
	)
;

// Entry rule entryRuleMCArrayType
entryRuleMCArrayType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMCArrayTypeRule()); }
	iv_ruleMCArrayType=ruleMCArrayType
	{ $current=$iv_ruleMCArrayType.current; }
	EOF;

// Rule MCArrayType
ruleMCArrayType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMCArrayTypeAccess().getMCPrimitiveTypeParserRuleCall_0());
		}
		this_MCPrimitiveType_0=ruleMCPrimitiveType
		{
			$current = $this_MCPrimitiveType_0.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getMCArrayTypeAccess().getLeftSquareBracketKeyword_1());
		}
		otherlv_2=']'
		{
			newLeafNode(otherlv_2, grammarAccess.getMCArrayTypeAccess().getRightSquareBracketKeyword_2());
		}
	)
;

RULE_MCQUALIFIEDNAME : RULE_ID ('.' RULE_ID)+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
