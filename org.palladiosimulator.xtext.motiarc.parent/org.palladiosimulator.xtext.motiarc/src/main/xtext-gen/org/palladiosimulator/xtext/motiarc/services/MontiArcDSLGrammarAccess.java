/*
 * generated by Xtext 2.34.0
 */
package org.palladiosimulator.xtext.motiarc.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MontiArcDSLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class MACompilationUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.motiarc.MontiArcDSL.MACompilationUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPackageAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPackagePackageParserRuleCall_0_0 = (RuleCall)cPackageAssignment_0.eContents().get(0);
		private final Assignment cImportStatementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportStatementsImportStatementsParserRuleCall_1_0 = (RuleCall)cImportStatementsAssignment_1.eContents().get(0);
		private final Assignment cComponentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cComponentComponentParserRuleCall_2_0 = (RuleCall)cComponentAssignment_2.eContents().get(0);
		
		//MACompilationUnit:
		//    package=Package importStatements+=ImportStatements*
		//    component=Component;
		@Override public ParserRule getRule() { return rule; }
		
		//package=Package importStatements+=ImportStatements*
		//component=Component
		public Group getGroup() { return cGroup; }
		
		//package=Package
		public Assignment getPackageAssignment_0() { return cPackageAssignment_0; }
		
		//Package
		public RuleCall getPackagePackageParserRuleCall_0_0() { return cPackagePackageParserRuleCall_0_0; }
		
		//importStatements+=ImportStatements*
		public Assignment getImportStatementsAssignment_1() { return cImportStatementsAssignment_1; }
		
		//ImportStatements
		public RuleCall getImportStatementsImportStatementsParserRuleCall_1_0() { return cImportStatementsImportStatementsParserRuleCall_1_0; }
		
		//component=Component
		public Assignment getComponentAssignment_2() { return cComponentAssignment_2; }
		
		//Component
		public RuleCall getComponentComponentParserRuleCall_2_0() { return cComponentComponentParserRuleCall_2_0; }
	}
	public class ComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.motiarc.MontiArcDSL.Component");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComponentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cSignatureAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSignatureSignatureParserRuleCall_2_0 = (RuleCall)cSignatureAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cArcElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cArcElementsArcElementParserRuleCall_4_0 = (RuleCall)cArcElementsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// Component Head
		//Component:
		//    "component" name=ID signature=Signature
		//    "{" arcElements+=ArcElement* "}"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"component" name=ID signature=Signature
		//"{" arcElements+=ArcElement* "}"
		public Group getGroup() { return cGroup; }
		
		//"component"
		public Keyword getComponentKeyword_0() { return cComponentKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//signature=Signature
		public Assignment getSignatureAssignment_2() { return cSignatureAssignment_2; }
		
		//Signature
		public RuleCall getSignatureSignatureParserRuleCall_2_0() { return cSignatureSignatureParserRuleCall_2_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//arcElements+=ArcElement*
		public Assignment getArcElementsAssignment_4() { return cArcElementsAssignment_4; }
		
		//ArcElement
		public RuleCall getArcElementsArcElementParserRuleCall_4_0() { return cArcElementsArcElementParserRuleCall_4_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class SignatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.motiarc.MontiArcDSL.Signature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSignatureAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cParametersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParametersParametersParserRuleCall_1_0 = (RuleCall)cParametersAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_2_1_0 = (RuleCall)cTypeAssignment_2_1.eContents().get(0);
		
		//Signature:
		//    {Signature} parameters?=Parameters? ("extends" type?=Type)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Signature} parameters?=Parameters? ("extends" type?=Type)?
		public Group getGroup() { return cGroup; }
		
		//{Signature}
		public Action getSignatureAction_0() { return cSignatureAction_0; }
		
		//parameters?=Parameters?
		public Assignment getParametersAssignment_1() { return cParametersAssignment_1; }
		
		//Parameters
		public RuleCall getParametersParametersParserRuleCall_1_0() { return cParametersParametersParserRuleCall_1_0; }
		
		//("extends" type?=Type)?
		public Group getGroup_2() { return cGroup_2; }
		
		//"extends"
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }
		
		//type?=Type
		public Assignment getTypeAssignment_2_1() { return cTypeAssignment_2_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_2_1_0() { return cTypeTypeParserRuleCall_2_1_0; }
	}
	public class ParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.motiarc.MontiArcDSL.Parameters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParametersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParametersParameterParserRuleCall_0_0 = (RuleCall)cParametersAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_1_1_0 = (RuleCall)cParametersAssignment_1_1.eContents().get(0);
		
		//Parameters:
		//    parameters+=Parameter ("," parameters+=Parameter)*;
		@Override public ParserRule getRule() { return rule; }
		
		//parameters+=Parameter ("," parameters+=Parameter)*
		public Group getGroup() { return cGroup; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_0() { return cParametersAssignment_0; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_0_0() { return cParametersParameterParserRuleCall_0_0; }
		
		//("," parameters+=Parameter)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_1_1() { return cParametersAssignment_1_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_1_1_0() { return cParametersParameterParserRuleCall_1_1_0; }
	}
	public class ComponentTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.motiarc.MontiArcDSL.ComponentType");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cTypeComponentCrossReference_0 = (CrossReference)cTypeAssignment.eContents().get(0);
		private final RuleCall cTypeComponentIDTerminalRuleCall_0_1 = (RuleCall)cTypeComponentCrossReference_0.eContents().get(1);
		
		//ComponentType:
		//    type = ([Component])
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type = ([Component])
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//([Component])
		public CrossReference getTypeComponentCrossReference_0() { return cTypeComponentCrossReference_0; }
		
		//ID
		public RuleCall getTypeComponentIDTerminalRuleCall_0_1() { return cTypeComponentIDTerminalRuleCall_0_1; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.motiarc.MontiArcDSL.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExpressionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_2_1_0 = (RuleCall)cExpressionAssignment_2_1.eContents().get(0);
		
		//Parameter:
		//    type=Type name=ID ("=" expression?=Expression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//type=Type name=ID ("=" expression?=Expression)?
		public Group getGroup() { return cGroup; }
		
		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//("=" expression?=Expression)?
		public Group getGroup_2() { return cGroup_2; }
		
		//"="
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }
		
		//expression?=Expression
		public Assignment getExpressionAssignment_2_1() { return cExpressionAssignment_2_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_1_0() { return cExpressionExpressionParserRuleCall_2_1_0; }
	}
	public class ArcElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.motiarc.MontiArcDSL.ArcElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cComponentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSubComponentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cConnectorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPortsParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cVariableParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cAutomatonParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//ArcElement:
		//    Component | SubComponent | Connector | Ports | Variable | Automaton;
		@Override public ParserRule getRule() { return rule; }
		
		//Component | SubComponent | Connector | Ports | Variable | Automaton
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Component
		public RuleCall getComponentParserRuleCall_0() { return cComponentParserRuleCall_0; }
		
		//SubComponent
		public RuleCall getSubComponentParserRuleCall_1() { return cSubComponentParserRuleCall_1; }
		
		//Connector
		public RuleCall getConnectorParserRuleCall_2() { return cConnectorParserRuleCall_2; }
		
		//Ports
		public RuleCall getPortsParserRuleCall_3() { return cPortsParserRuleCall_3; }
		
		//Variable
		public RuleCall getVariableParserRuleCall_4() { return cVariableParserRuleCall_4; }
		
		//Automaton
		public RuleCall getAutomatonParserRuleCall_5() { return cAutomatonParserRuleCall_5; }
	}
	public class SubComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.motiarc.MontiArcDSL.SubComponent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComponentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgumentsArgumentsParserRuleCall_2_0 = (RuleCall)cArgumentsAssignment_2.eContents().get(0);
		private final Assignment cInstancesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInstancesNamesParserRuleCall_3_0 = (RuleCall)cInstancesAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// Component Body Elements
		//SubComponent:
		//    "component" type=Type arguments?=Arguments? instances=Names ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"component" type=Type arguments?=Arguments? instances=Names ";"
		public Group getGroup() { return cGroup; }
		
		//"component"
		public Keyword getComponentKeyword_0() { return cComponentKeyword_0; }
		
		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }
		
		//arguments?=Arguments?
		public Assignment getArgumentsAssignment_2() { return cArgumentsAssignment_2; }
		
		//Arguments
		public RuleCall getArgumentsArgumentsParserRuleCall_2_0() { return cArgumentsArgumentsParserRuleCall_2_0; }
		
		//instances=Names
		public Assignment getInstancesAssignment_3() { return cInstancesAssignment_3; }
		
		//Names
		public RuleCall getInstancesNamesParserRuleCall_3_0() { return cInstancesNamesParserRuleCall_3_0; }
		
		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class ConnectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.motiarc.MontiArcDSL.Connector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cSourceAlternatives_0_0 = (Alternatives)cSourceAssignment_0.eContents().get(0);
		private final RuleCall cSourceIDTerminalRuleCall_0_0_0 = (RuleCall)cSourceAlternatives_0_0.eContents().get(0);
		private final RuleCall cSourceMCQUALIFIEDNAMETerminalRuleCall_0_0_1 = (RuleCall)cSourceAlternatives_0_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTargetsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTargetsNamesParserRuleCall_2_0 = (RuleCall)cTargetsAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Connector:
		//    source=(ID|MCQUALIFIEDNAME) "->" targets=Names ";";
		@Override public ParserRule getRule() { return rule; }
		
		//source=(ID|MCQUALIFIEDNAME) "->" targets=Names ";"
		public Group getGroup() { return cGroup; }
		
		//source=(ID|MCQUALIFIEDNAME)
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }
		
		//(ID|MCQUALIFIEDNAME)
		public Alternatives getSourceAlternatives_0_0() { return cSourceAlternatives_0_0; }
		
		//ID
		public RuleCall getSourceIDTerminalRuleCall_0_0_0() { return cSourceIDTerminalRuleCall_0_0_0; }
		
		//MCQUALIFIEDNAME
		public RuleCall getSourceMCQUALIFIEDNAMETerminalRuleCall_0_0_1() { return cSourceMCQUALIFIEDNAMETerminalRuleCall_0_0_1; }
		
		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }
		
		//targets=Names
		public Assignment getTargetsAssignment_2() { return cTargetsAssignment_2; }
		
		//Names
		public RuleCall getTargetsNamesParserRuleCall_2_0() { return cTargetsNamesParserRuleCall_2_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class PortsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.motiarc.MontiArcDSL.Ports");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPortKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPortsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPortsPortParserRuleCall_1_0 = (RuleCall)cPortsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPortsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPortsPortParserRuleCall_2_1_0 = (RuleCall)cPortsAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Ports:
		//    "port" ports+=Port ("," ports+=Port)* ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"port" ports+=Port ("," ports+=Port)* ";"
		public Group getGroup() { return cGroup; }
		
		//"port"
		public Keyword getPortKeyword_0() { return cPortKeyword_0; }
		
		//ports+=Port
		public Assignment getPortsAssignment_1() { return cPortsAssignment_1; }
		
		//Port
		public RuleCall getPortsPortParserRuleCall_1_0() { return cPortsPortParserRuleCall_1_0; }
		
		//("," ports+=Port)*
		public Group getGroup_2() { return cGroup_2; }
		
		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//ports+=Port
		public Assignment getPortsAssignment_2_1() { return cPortsAssignment_2_1; }
		
		//Port
		public RuleCall getPortsPortParserRuleCall_2_1_0() { return cPortsPortParserRuleCall_2_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class PortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.motiarc.MontiArcDSL.Port");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSyncAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSyncSYNCTerminalRuleCall_0_0 = (RuleCall)cSyncAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cInAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cInInKeyword_1_0_0 = (Keyword)cInAssignment_1_0.eContents().get(0);
		private final Assignment cOutAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cOutOutKeyword_1_1_0 = (Keyword)cOutAssignment_1_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_2_0_0 = (RuleCall)cTypeAssignment_2_0.eContents().get(0);
		private final Assignment cDatatypeAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final CrossReference cDatatypeCDDefinitionCrossReference_2_1_0 = (CrossReference)cDatatypeAssignment_2_1.eContents().get(0);
		private final RuleCall cDatatypeCDDefinitionIDTerminalRuleCall_2_1_0_1 = (RuleCall)cDatatypeCDDefinitionCrossReference_2_1_0.eContents().get(1);
		private final Assignment cNamesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNamesNamesParserRuleCall_3_0 = (RuleCall)cNamesAssignment_3.eContents().get(0);
		
		//Port:
		//    (sync?=SYNC)?(in?="in" | out?="out") (type=Type|datatype=([cd::CDDefinition])) names?=Names? ;
		@Override public ParserRule getRule() { return rule; }
		
		//(sync?=SYNC)?(in?="in" | out?="out") (type=Type|datatype=([cd::CDDefinition])) names?=Names?
		public Group getGroup() { return cGroup; }
		
		//(sync?=SYNC)?
		public Assignment getSyncAssignment_0() { return cSyncAssignment_0; }
		
		//SYNC
		public RuleCall getSyncSYNCTerminalRuleCall_0_0() { return cSyncSYNCTerminalRuleCall_0_0; }
		
		//(in?="in" | out?="out")
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//in?="in"
		public Assignment getInAssignment_1_0() { return cInAssignment_1_0; }
		
		//"in"
		public Keyword getInInKeyword_1_0_0() { return cInInKeyword_1_0_0; }
		
		//out?="out"
		public Assignment getOutAssignment_1_1() { return cOutAssignment_1_1; }
		
		//"out"
		public Keyword getOutOutKeyword_1_1_0() { return cOutOutKeyword_1_1_0; }
		
		//(type=Type|datatype=([cd::CDDefinition]))
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//type=Type
		public Assignment getTypeAssignment_2_0() { return cTypeAssignment_2_0; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0_0() { return cTypeTypeParserRuleCall_2_0_0; }
		
		//datatype=([cd::CDDefinition])
		public Assignment getDatatypeAssignment_2_1() { return cDatatypeAssignment_2_1; }
		
		//([cd::CDDefinition])
		public CrossReference getDatatypeCDDefinitionCrossReference_2_1_0() { return cDatatypeCDDefinitionCrossReference_2_1_0; }
		
		//ID
		public RuleCall getDatatypeCDDefinitionIDTerminalRuleCall_2_1_0_1() { return cDatatypeCDDefinitionIDTerminalRuleCall_2_1_0_1; }
		
		//names?=Names?
		public Assignment getNamesAssignment_3() { return cNamesAssignment_3; }
		
		//Names
		public RuleCall getNamesNamesParserRuleCall_3_0() { return cNamesNamesParserRuleCall_3_0; }
	}
	public class NamesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.motiarc.MontiArcDSL.Names");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNamesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cNamesAlternatives_0_0 = (Alternatives)cNamesAssignment_0.eContents().get(0);
		private final RuleCall cNamesIDTerminalRuleCall_0_0_0 = (RuleCall)cNamesAlternatives_0_0.eContents().get(0);
		private final RuleCall cNamesMCQUALIFIEDNAMETerminalRuleCall_0_0_1 = (RuleCall)cNamesAlternatives_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNamesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cNamesAlternatives_1_1_0 = (Alternatives)cNamesAssignment_1_1.eContents().get(0);
		private final RuleCall cNamesIDTerminalRuleCall_1_1_0_0 = (RuleCall)cNamesAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cNamesMCQUALIFIEDNAMETerminalRuleCall_1_1_0_1 = (RuleCall)cNamesAlternatives_1_1_0.eContents().get(1);
		
		//Names:
		//    names+=(ID|MCQUALIFIEDNAME) ("," names+=(ID|MCQUALIFIEDNAME))*;
		@Override public ParserRule getRule() { return rule; }
		
		//names+=(ID|MCQUALIFIEDNAME) ("," names+=(ID|MCQUALIFIEDNAME))*
		public Group getGroup() { return cGroup; }
		
		//names+=(ID|MCQUALIFIEDNAME)
		public Assignment getNamesAssignment_0() { return cNamesAssignment_0; }
		
		//(ID|MCQUALIFIEDNAME)
		public Alternatives getNamesAlternatives_0_0() { return cNamesAlternatives_0_0; }
		
		//ID
		public RuleCall getNamesIDTerminalRuleCall_0_0_0() { return cNamesIDTerminalRuleCall_0_0_0; }
		
		//MCQUALIFIEDNAME
		public RuleCall getNamesMCQUALIFIEDNAMETerminalRuleCall_0_0_1() { return cNamesMCQUALIFIEDNAMETerminalRuleCall_0_0_1; }
		
		//("," names+=(ID|MCQUALIFIEDNAME))*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//names+=(ID|MCQUALIFIEDNAME)
		public Assignment getNamesAssignment_1_1() { return cNamesAssignment_1_1; }
		
		//(ID|MCQUALIFIEDNAME)
		public Alternatives getNamesAlternatives_1_1_0() { return cNamesAlternatives_1_1_0; }
		
		//ID
		public RuleCall getNamesIDTerminalRuleCall_1_1_0_0() { return cNamesIDTerminalRuleCall_1_1_0_0; }
		
		//MCQUALIFIEDNAME
		public RuleCall getNamesMCQUALIFIEDNAMETerminalRuleCall_1_1_0_1() { return cNamesMCQUALIFIEDNAMETerminalRuleCall_1_1_0_1; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.motiarc.MontiArcDSL.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cTypeAlternatives_0_0 = (Alternatives)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0_0 = (RuleCall)cTypeAlternatives_0_0.eContents().get(0);
		private final RuleCall cTypeComponentTypeParserRuleCall_0_0_1 = (RuleCall)cTypeAlternatives_0_0.eContents().get(1);
		private final Assignment cNamesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamesNamesParserRuleCall_1_0 = (RuleCall)cNamesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParametersExpressionParserRuleCall_2_1_0 = (RuleCall)cParametersAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cParametersExpressionParserRuleCall_2_2_1_0 = (RuleCall)cParametersAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// Embedded Behavior Elements
		//Variable:
		//    type=(Type|ComponentType) names?=Names? ('('parameters+=Expression(','parameters+=Expression)*')')?";";
		@Override public ParserRule getRule() { return rule; }
		
		//type=(Type|ComponentType) names?=Names? ('('parameters+=Expression(','parameters+=Expression)*')')?";"
		public Group getGroup() { return cGroup; }
		
		//type=(Type|ComponentType)
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//(Type|ComponentType)
		public Alternatives getTypeAlternatives_0_0() { return cTypeAlternatives_0_0; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0_0() { return cTypeTypeParserRuleCall_0_0_0; }
		
		//ComponentType
		public RuleCall getTypeComponentTypeParserRuleCall_0_0_1() { return cTypeComponentTypeParserRuleCall_0_0_1; }
		
		//names?=Names?
		public Assignment getNamesAssignment_1() { return cNamesAssignment_1; }
		
		//Names
		public RuleCall getNamesNamesParserRuleCall_1_0() { return cNamesNamesParserRuleCall_1_0; }
		
		//('('parameters+=Expression(','parameters+=Expression)*')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//parameters+=Expression
		public Assignment getParametersAssignment_2_1() { return cParametersAssignment_2_1; }
		
		//Expression
		public RuleCall getParametersExpressionParserRuleCall_2_1_0() { return cParametersExpressionParserRuleCall_2_1_0; }
		
		//(','parameters+=Expression)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//parameters+=Expression
		public Assignment getParametersAssignment_2_2_1() { return cParametersAssignment_2_2_1; }
		
		//Expression
		public RuleCall getParametersExpressionParserRuleCall_2_2_1_0() { return cParametersExpressionParserRuleCall_2_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class AutomatonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.motiarc.MontiArcDSL.Automaton");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAutomatonAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSyncAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSyncSYNCTerminalRuleCall_1_0 = (RuleCall)cSyncAssignment_1.eContents().get(0);
		private final Keyword cAutomatonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cStatesAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cStatesStateParserRuleCall_5_0_0 = (RuleCall)cStatesAssignment_5_0.eContents().get(0);
		private final Assignment cTransitionsAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cTransitionsTransitionParserRuleCall_5_1_0 = (RuleCall)cTransitionsAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Automaton:
		//    {Automaton} (sync?=SYNC)? "automaton" name?=ID? "{" (states+=State |
		//    transitions+=Transition)* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//{Automaton} (sync?=SYNC)? "automaton" name?=ID? "{" (states+=State |
		//transitions+=Transition)* "}"
		public Group getGroup() { return cGroup; }
		
		//{Automaton}
		public Action getAutomatonAction_0() { return cAutomatonAction_0; }
		
		//(sync?=SYNC)?
		public Assignment getSyncAssignment_1() { return cSyncAssignment_1; }
		
		//SYNC
		public RuleCall getSyncSYNCTerminalRuleCall_1_0() { return cSyncSYNCTerminalRuleCall_1_0; }
		
		//"automaton"
		public Keyword getAutomatonKeyword_2() { return cAutomatonKeyword_2; }
		
		//name?=ID?
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//(states+=State |
		//   transitions+=Transition)*
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//states+=State
		public Assignment getStatesAssignment_5_0() { return cStatesAssignment_5_0; }
		
		//State
		public RuleCall getStatesStateParserRuleCall_5_0_0() { return cStatesStateParserRuleCall_5_0_0; }
		
		//transitions+=Transition
		public Assignment getTransitionsAssignment_5_1() { return cTransitionsAssignment_5_1; }
		
		//Transition
		public RuleCall getTransitionsTransitionParserRuleCall_5_1_0() { return cTransitionsTransitionParserRuleCall_5_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.motiarc.MontiArcDSL.State");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSCStateParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInvStateParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//State:
		//    SCState | InvState
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//SCState | InvState
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SCState
		public RuleCall getSCStateParserRuleCall_0() { return cSCStateParserRuleCall_0; }
		
		//InvState
		public RuleCall getInvStateParserRuleCall_1() { return cInvStateParserRuleCall_1; }
	}
	public class SCStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.motiarc.MontiArcDSL.SCState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModifierSCModifierEnumRuleCall_0_0 = (RuleCall)cModifierAssignment_0.eContents().get(0);
		private final Assignment cAnteAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnteSCSAnteParserRuleCall_1_0 = (RuleCall)cAnteAssignment_1.eContents().get(0);
		private final Keyword cStateKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SCState:
		//    (modifier+=SCModifier)* (ante=SCSAnte)? "state" name=ID ";";
		@Override public ParserRule getRule() { return rule; }
		
		//(modifier+=SCModifier)* (ante=SCSAnte)? "state" name=ID ";"
		public Group getGroup() { return cGroup; }
		
		//(modifier+=SCModifier)*
		public Assignment getModifierAssignment_0() { return cModifierAssignment_0; }
		
		//SCModifier
		public RuleCall getModifierSCModifierEnumRuleCall_0_0() { return cModifierSCModifierEnumRuleCall_0_0; }
		
		//(ante=SCSAnte)?
		public Assignment getAnteAssignment_1() { return cAnteAssignment_1; }
		
		//SCSAnte
		public RuleCall getAnteSCSAnteParserRuleCall_1_0() { return cAnteSCSAnteParserRuleCall_1_0; }
		
		//"state"
		public Keyword getStateKeyword_2() { return cStateKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class InvStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.motiarc.MontiArcDSL.InvState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModifierSCModifierEnumRuleCall_0_0 = (RuleCall)cModifierAssignment_0.eContents().get(0);
		private final Keyword cStateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionExpressionParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//InvState:
		//    (modifier+=SCModifier)* "state" name=ID '[' expression=Expression ']'";";
		@Override public ParserRule getRule() { return rule; }
		
		//(modifier+=SCModifier)* "state" name=ID '[' expression=Expression ']'";"
		public Group getGroup() { return cGroup; }
		
		//(modifier+=SCModifier)*
		public Assignment getModifierAssignment_0() { return cModifierAssignment_0; }
		
		//SCModifier
		public RuleCall getModifierSCModifierEnumRuleCall_0_0() { return cModifierSCModifierEnumRuleCall_0_0; }
		
		//"state"
		public Keyword getStateKeyword_1() { return cStateKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3() { return cLeftSquareBracketKeyword_3; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_4_0() { return cExpressionExpressionParserRuleCall_4_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
		
		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class SCSAnteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.motiarc.MontiArcDSL.SCSAnte");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSCSAnteAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cBlockAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBlockBlockParserRuleCall_1_0 = (RuleCall)cBlockAssignment_1.eContents().get(0);
		
		//SCSAnte:
		//    {SCSAnte} (block=Block)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{SCSAnte} (block=Block)
		public Group getGroup() { return cGroup; }
		
		//{SCSAnte}
		public Action getSCSAnteAction_0() { return cSCSAnteAction_0; }
		
		//(block=Block)
		public Assignment getBlockAssignment_1() { return cBlockAssignment_1; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_1_0() { return cBlockBlockParserRuleCall_1_0; }
	}
	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.motiarc.MontiArcDSL.Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceStateCrossReference_0_0 = (CrossReference)cSourceAssignment_0.eContents().get(0);
		private final RuleCall cSourceStateIDTerminalRuleCall_0_0_1 = (RuleCall)cSourceStateCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTargetAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cTargetStateCrossReference_1_1_0 = (CrossReference)cTargetAssignment_1_1.eContents().get(0);
		private final RuleCall cTargetStateIDTerminalRuleCall_1_1_0_1 = (RuleCall)cTargetStateCrossReference_1_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExpressionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_2_1_0 = (RuleCall)cExpressionAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cSolidusKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cReactionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cReactionBlockParserRuleCall_3_1_0 = (RuleCall)cReactionAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Transition:
		//    source=[State] ("->" target=[State])?
		//    ("[" expression=Expression "]")?("/" reaction=Block)?";";
		@Override public ParserRule getRule() { return rule; }
		
		//source=[State] ("->" target=[State])?
		//("[" expression=Expression "]")?("/" reaction=Block)?";"
		public Group getGroup() { return cGroup; }
		
		//source=[State]
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }
		
		//[State]
		public CrossReference getSourceStateCrossReference_0_0() { return cSourceStateCrossReference_0_0; }
		
		//ID
		public RuleCall getSourceStateIDTerminalRuleCall_0_0_1() { return cSourceStateIDTerminalRuleCall_0_0_1; }
		
		//("->" target=[State])?
		public Group getGroup_1() { return cGroup_1; }
		
		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_0() { return cHyphenMinusGreaterThanSignKeyword_1_0; }
		
		//target=[State]
		public Assignment getTargetAssignment_1_1() { return cTargetAssignment_1_1; }
		
		//[State]
		public CrossReference getTargetStateCrossReference_1_1_0() { return cTargetStateCrossReference_1_1_0; }
		
		//ID
		public RuleCall getTargetStateIDTerminalRuleCall_1_1_0_1() { return cTargetStateIDTerminalRuleCall_1_1_0_1; }
		
		//("[" expression=Expression "]")?
		public Group getGroup_2() { return cGroup_2; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2_1() { return cExpressionAssignment_2_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_1_0() { return cExpressionExpressionParserRuleCall_2_1_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }
		
		//("/" reaction=Block)?
		public Group getGroup_3() { return cGroup_3; }
		
		//"/"
		public Keyword getSolidusKeyword_3_0() { return cSolidusKeyword_3_0; }
		
		//reaction=Block
		public Assignment getReactionAssignment_3_1() { return cReactionAssignment_3_1; }
		
		//Block
		public RuleCall getReactionBlockParserRuleCall_3_1_0() { return cReactionBlockParserRuleCall_3_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.motiarc.MontiArcDSL.Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBlocksAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBlocksBlockStatementParserRuleCall_2_0 = (RuleCall)cBlocksAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Block:
		//    {Block} '{' blocks+=BlockStatement* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Block} '{' blocks+=BlockStatement* '}'
		public Group getGroup() { return cGroup; }
		
		//{Block}
		public Action getBlockAction_0() { return cBlockAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//blocks+=BlockStatement*
		public Assignment getBlocksAssignment_2() { return cBlocksAssignment_2; }
		
		//BlockStatement
		public RuleCall getBlocksBlockStatementParserRuleCall_2_0() { return cBlocksBlockStatementParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class BlockStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.motiarc.MontiArcDSL.BlockStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleInitParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSimpleExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//BlockStatement:
		//    SimpleInit | SimpleExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleInit | SimpleExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SimpleInit
		public RuleCall getSimpleInitParserRuleCall_0() { return cSimpleInitParserRuleCall_0; }
		
		//SimpleExpression
		public RuleCall getSimpleExpressionParserRuleCall_1() { return cSimpleExpressionParserRuleCall_1; }
	}
	public class SimpleExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.motiarc.MontiArcDSL.SimpleExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionExpressionParserRuleCall_0_0 = (RuleCall)cExpressionAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//SimpleExpression:
		//    expression=Expression ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//expression=Expression ';'
		public Group getGroup() { return cGroup; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_0() { return cExpressionAssignment_0; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_0() { return cExpressionExpressionParserRuleCall_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class SimpleInitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.motiarc.MontiArcDSL.SimpleInit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionsExpressionParserRuleCall_2_0 = (RuleCall)cExpressionsAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SimpleInit:
		//    name=ID "=" expressions+=Expression';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID "=" expressions+=Expression';'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//expressions+=Expression
		public Assignment getExpressionsAssignment_2() { return cExpressionsAssignment_2; }
		
		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_2_0() { return cExpressionsExpressionParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	
	public class SCModifierElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.motiarc.MontiArcDSL.SCModifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cINITIALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cINITIALInitialKeyword_0_0 = (Keyword)cINITIALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFINALEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFINALFinalKeyword_1_0 = (Keyword)cFINALEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum SCModifier:
		//    INITIAL='initial' | FINAL='final'
		//;
		public EnumRule getRule() { return rule; }
		
		//INITIAL='initial' | FINAL='final'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INITIAL='initial'
		public EnumLiteralDeclaration getINITIALEnumLiteralDeclaration_0() { return cINITIALEnumLiteralDeclaration_0; }
		
		//'initial'
		public Keyword getINITIALInitialKeyword_0_0() { return cINITIALInitialKeyword_0_0; }
		
		//FINAL='final'
		public EnumLiteralDeclaration getFINALEnumLiteralDeclaration_1() { return cFINALEnumLiteralDeclaration_1; }
		
		//'final'
		public Keyword getFINALFinalKeyword_1_0() { return cFINALFinalKeyword_1_0; }
	}
	
	private final MACompilationUnitElements pMACompilationUnit;
	private final ComponentElements pComponent;
	private final SignatureElements pSignature;
	private final ParametersElements pParameters;
	private final ComponentTypeElements pComponentType;
	private final ParameterElements pParameter;
	private final ArcElementElements pArcElement;
	private final SubComponentElements pSubComponent;
	private final ConnectorElements pConnector;
	private final PortsElements pPorts;
	private final PortElements pPort;
	private final NamesElements pNames;
	private final VariableElements pVariable;
	private final AutomatonElements pAutomaton;
	private final StateElements pState;
	private final SCStateElements pSCState;
	private final InvStateElements pInvState;
	private final SCSAnteElements pSCSAnte;
	private final SCModifierElements eSCModifier;
	private final TransitionElements pTransition;
	private final BlockElements pBlock;
	private final BlockStatementElements pBlockStatement;
	private final SimpleExpressionElements pSimpleExpression;
	private final SimpleInitElements pSimpleInit;
	private final TerminalRule tSYNC;
	
	private final Grammar grammar;
	
	private final MCBasicsGrammarAccess gaMCBasics;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MontiArcDSLGrammarAccess(GrammarProvider grammarProvider,
			MCBasicsGrammarAccess gaMCBasics,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaMCBasics = gaMCBasics;
		this.gaTerminals = gaTerminals;
		this.pMACompilationUnit = new MACompilationUnitElements();
		this.pComponent = new ComponentElements();
		this.pSignature = new SignatureElements();
		this.pParameters = new ParametersElements();
		this.pComponentType = new ComponentTypeElements();
		this.pParameter = new ParameterElements();
		this.pArcElement = new ArcElementElements();
		this.pSubComponent = new SubComponentElements();
		this.pConnector = new ConnectorElements();
		this.pPorts = new PortsElements();
		this.pPort = new PortElements();
		this.pNames = new NamesElements();
		this.pVariable = new VariableElements();
		this.pAutomaton = new AutomatonElements();
		this.pState = new StateElements();
		this.pSCState = new SCStateElements();
		this.pInvState = new InvStateElements();
		this.pSCSAnte = new SCSAnteElements();
		this.eSCModifier = new SCModifierElements();
		this.pTransition = new TransitionElements();
		this.pBlock = new BlockElements();
		this.pBlockStatement = new BlockStatementElements();
		this.pSimpleExpression = new SimpleExpressionElements();
		this.pSimpleInit = new SimpleInitElements();
		this.tSYNC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.motiarc.MontiArcDSL.SYNC");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.palladiosimulator.xtext.motiarc.MontiArcDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public MCBasicsGrammarAccess getMCBasicsGrammarAccess() {
		return gaMCBasics;
	}
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//MACompilationUnit:
	//    package=Package importStatements+=ImportStatements*
	//    component=Component;
	public MACompilationUnitElements getMACompilationUnitAccess() {
		return pMACompilationUnit;
	}
	
	public ParserRule getMACompilationUnitRule() {
		return getMACompilationUnitAccess().getRule();
	}
	
	//// Component Head
	//Component:
	//    "component" name=ID signature=Signature
	//    "{" arcElements+=ArcElement* "}"
	//;
	public ComponentElements getComponentAccess() {
		return pComponent;
	}
	
	public ParserRule getComponentRule() {
		return getComponentAccess().getRule();
	}
	
	//Signature:
	//    {Signature} parameters?=Parameters? ("extends" type?=Type)?;
	public SignatureElements getSignatureAccess() {
		return pSignature;
	}
	
	public ParserRule getSignatureRule() {
		return getSignatureAccess().getRule();
	}
	
	//Parameters:
	//    parameters+=Parameter ("," parameters+=Parameter)*;
	public ParametersElements getParametersAccess() {
		return pParameters;
	}
	
	public ParserRule getParametersRule() {
		return getParametersAccess().getRule();
	}
	
	//ComponentType:
	//    type = ([Component])
	//;
	public ComponentTypeElements getComponentTypeAccess() {
		return pComponentType;
	}
	
	public ParserRule getComponentTypeRule() {
		return getComponentTypeAccess().getRule();
	}
	
	//Parameter:
	//    type=Type name=ID ("=" expression?=Expression)?;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//ArcElement:
	//    Component | SubComponent | Connector | Ports | Variable | Automaton;
	public ArcElementElements getArcElementAccess() {
		return pArcElement;
	}
	
	public ParserRule getArcElementRule() {
		return getArcElementAccess().getRule();
	}
	
	//// Component Body Elements
	//SubComponent:
	//    "component" type=Type arguments?=Arguments? instances=Names ";";
	public SubComponentElements getSubComponentAccess() {
		return pSubComponent;
	}
	
	public ParserRule getSubComponentRule() {
		return getSubComponentAccess().getRule();
	}
	
	//Connector:
	//    source=(ID|MCQUALIFIEDNAME) "->" targets=Names ";";
	public ConnectorElements getConnectorAccess() {
		return pConnector;
	}
	
	public ParserRule getConnectorRule() {
		return getConnectorAccess().getRule();
	}
	
	//Ports:
	//    "port" ports+=Port ("," ports+=Port)* ";";
	public PortsElements getPortsAccess() {
		return pPorts;
	}
	
	public ParserRule getPortsRule() {
		return getPortsAccess().getRule();
	}
	
	//Port:
	//    (sync?=SYNC)?(in?="in" | out?="out") (type=Type|datatype=([cd::CDDefinition])) names?=Names? ;
	public PortElements getPortAccess() {
		return pPort;
	}
	
	public ParserRule getPortRule() {
		return getPortAccess().getRule();
	}
	
	//Names:
	//    names+=(ID|MCQUALIFIEDNAME) ("," names+=(ID|MCQUALIFIEDNAME))*;
	public NamesElements getNamesAccess() {
		return pNames;
	}
	
	public ParserRule getNamesRule() {
		return getNamesAccess().getRule();
	}
	
	//// Embedded Behavior Elements
	//Variable:
	//    type=(Type|ComponentType) names?=Names? ('('parameters+=Expression(','parameters+=Expression)*')')?";";
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//Automaton:
	//    {Automaton} (sync?=SYNC)? "automaton" name?=ID? "{" (states+=State |
	//    transitions+=Transition)* "}";
	public AutomatonElements getAutomatonAccess() {
		return pAutomaton;
	}
	
	public ParserRule getAutomatonRule() {
		return getAutomatonAccess().getRule();
	}
	
	//State:
	//    SCState | InvState
	//;
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//SCState:
	//    (modifier+=SCModifier)* (ante=SCSAnte)? "state" name=ID ";";
	public SCStateElements getSCStateAccess() {
		return pSCState;
	}
	
	public ParserRule getSCStateRule() {
		return getSCStateAccess().getRule();
	}
	
	//InvState:
	//    (modifier+=SCModifier)* "state" name=ID '[' expression=Expression ']'";";
	public InvStateElements getInvStateAccess() {
		return pInvState;
	}
	
	public ParserRule getInvStateRule() {
		return getInvStateAccess().getRule();
	}
	
	//SCSAnte:
	//    {SCSAnte} (block=Block)
	//;
	public SCSAnteElements getSCSAnteAccess() {
		return pSCSAnte;
	}
	
	public ParserRule getSCSAnteRule() {
		return getSCSAnteAccess().getRule();
	}
	
	//enum SCModifier:
	//    INITIAL='initial' | FINAL='final'
	//;
	public SCModifierElements getSCModifierAccess() {
		return eSCModifier;
	}
	
	public EnumRule getSCModifierRule() {
		return getSCModifierAccess().getRule();
	}
	
	//Transition:
	//    source=[State] ("->" target=[State])?
	//    ("[" expression=Expression "]")?("/" reaction=Block)?";";
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}
	
	//Block:
	//    {Block} '{' blocks+=BlockStatement* '}';
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//BlockStatement:
	//    SimpleInit | SimpleExpression
	//;
	public BlockStatementElements getBlockStatementAccess() {
		return pBlockStatement;
	}
	
	public ParserRule getBlockStatementRule() {
		return getBlockStatementAccess().getRule();
	}
	
	//SimpleExpression:
	//    expression=Expression ';'
	//;
	public SimpleExpressionElements getSimpleExpressionAccess() {
		return pSimpleExpression;
	}
	
	public ParserRule getSimpleExpressionRule() {
		return getSimpleExpressionAccess().getRule();
	}
	
	//SimpleInit:
	//    name=ID "=" expressions+=Expression';'
	//;
	public SimpleInitElements getSimpleInitAccess() {
		return pSimpleInit;
	}
	
	public ParserRule getSimpleInitRule() {
		return getSimpleInitAccess().getRule();
	}
	
	//terminal SYNC:
	//    "<<sync>>"
	//;
	public TerminalRule getSYNCRule() {
		return tSYNC;
	}
	
	//ImportStatements:
	//    'import' importUri=MCQUALIFIEDNAME star?=DOTSTAR? ";"
	//;
	public MCBasicsGrammarAccess.ImportStatementsElements getImportStatementsAccess() {
		return gaMCBasics.getImportStatementsAccess();
	}
	
	public ParserRule getImportStatementsRule() {
		return getImportStatementsAccess().getRule();
	}
	
	//Package:
	//    'package' name=(MCQUALIFIEDNAME | ID)';'
	//;
	public MCBasicsGrammarAccess.PackageElements getPackageAccess() {
		return gaMCBasics.getPackageAccess();
	}
	
	public ParserRule getPackageRule() {
		return getPackageAccess().getRule();
	}
	
	//Type:
	//    MCPrimitiveType | MCArrayType | MCObjectType | MCCollectionType
	//;
	public MCBasicsGrammarAccess.TypeElements getTypeAccess() {
		return gaMCBasics.getTypeAccess();
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//MCPrimitiveType:
	//     type = ( 'boolean' | 'byte' | 'short' | 'int'
	//                  | 'long' | 'char' |'float' | 'double' )
	//;
	public MCBasicsGrammarAccess.MCPrimitiveTypeElements getMCPrimitiveTypeAccess() {
		return gaMCBasics.getMCPrimitiveTypeAccess();
	}
	
	public ParserRule getMCPrimitiveTypeRule() {
		return getMCPrimitiveTypeAccess().getRule();
	}
	
	//MCObjectType:
	//    type = ( 'Boolean' | 'Byte' | 'Integer'
	//                  | 'Long' | 'Char' |'Double' | 'String' )
	//;
	public MCBasicsGrammarAccess.MCObjectTypeElements getMCObjectTypeAccess() {
		return gaMCBasics.getMCObjectTypeAccess();
	}
	
	public ParserRule getMCObjectTypeRule() {
		return getMCObjectTypeAccess().getRule();
	}
	
	//MCVoidType:
	//    type = 'void'
	//;
	public MCBasicsGrammarAccess.MCVoidTypeElements getMCVoidTypeAccess() {
		return gaMCBasics.getMCVoidTypeAccess();
	}
	
	public ParserRule getMCVoidTypeRule() {
		return getMCVoidTypeAccess().getRule();
	}
	
	//MCCollectionType:
	//    collection = ('Set' | 'List' | 'Map' | 'Optional') '<' innerType=Type '>'
	//;
	public MCBasicsGrammarAccess.MCCollectionTypeElements getMCCollectionTypeAccess() {
		return gaMCBasics.getMCCollectionTypeAccess();
	}
	
	public ParserRule getMCCollectionTypeRule() {
		return getMCCollectionTypeAccess().getRule();
	}
	
	//MCArrayType:
	//    MCPrimitiveType'['']'
	//;
	public MCBasicsGrammarAccess.MCArrayTypeElements getMCArrayTypeAccess() {
		return gaMCBasics.getMCArrayTypeAccess();
	}
	
	public ParserRule getMCArrayTypeRule() {
		return getMCArrayTypeAccess().getRule();
	}
	
	//Expression:
	//    NameExpression | LiteralExpression | BinaryExpression
	//;
	public MCBasicsGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaMCBasics.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//LiteralExpression:
	//    NumberLiteral | StringLiteral
	//;
	public MCBasicsGrammarAccess.LiteralExpressionElements getLiteralExpressionAccess() {
		return gaMCBasics.getLiteralExpressionAccess();
	}
	
	public ParserRule getLiteralExpressionRule() {
		return getLiteralExpressionAccess().getRule();
	}
	
	//NumberLiteral:
	//  literal=INT
	//;
	public MCBasicsGrammarAccess.NumberLiteralElements getNumberLiteralAccess() {
		return gaMCBasics.getNumberLiteralAccess();
	}
	
	public ParserRule getNumberLiteralRule() {
		return getNumberLiteralAccess().getRule();
	}
	
	//StringLiteral:
	//    literal=STRING
	//;
	public MCBasicsGrammarAccess.StringLiteralElements getStringLiteralAccess() {
		return gaMCBasics.getStringLiteralAccess();
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}
	
	//NameExpression:
	//    name=ID | qualifiedname=MCQUALIFIEDNAME
	//;
	public MCBasicsGrammarAccess.NameExpressionElements getNameExpressionAccess() {
		return gaMCBasics.getNameExpressionAccess();
	}
	
	public ParserRule getNameExpressionRule() {
		return getNameExpressionAccess().getRule();
	}
	
	//BinaryExpression:
	//    literal1 = (LiteralExpression|NameExpression) op=Operator literal2= (LiteralExpression|NameExpression)
	//;
	public MCBasicsGrammarAccess.BinaryExpressionElements getBinaryExpressionAccess() {
		return gaMCBasics.getBinaryExpressionAccess();
	}
	
	public ParserRule getBinaryExpressionRule() {
		return getBinaryExpressionAccess().getRule();
	}
	
	//enum Operator:
	//    GT='>'| LT='<' | EQ='==' | BA='&&' | PLUS='+' | MINUS='-' | DIV='/' | MULT='*'
	//;
	public MCBasicsGrammarAccess.OperatorElements getOperatorAccess() {
		return gaMCBasics.getOperatorAccess();
	}
	
	public EnumRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}
	
	//Arguments:
	//    '(' arguments+=Argument (',' arguments+=Argument)* ')'
	//;
	public MCBasicsGrammarAccess.ArgumentsElements getArgumentsAccess() {
		return gaMCBasics.getArgumentsAccess();
	}
	
	public ParserRule getArgumentsRule() {
		return getArgumentsAccess().getRule();
	}
	
	//Argument:
	//    name?=ID expression=Expression
	//;
	public MCBasicsGrammarAccess.ArgumentElements getArgumentAccess() {
		return gaMCBasics.getArgumentAccess();
	}
	
	public ParserRule getArgumentRule() {
		return getArgumentAccess().getRule();
	}
	
	//terminal MCQUALIFIEDNAME returns ecore::EString:
	//    ID ('.' ID)+
	//;
	public TerminalRule getMCQUALIFIEDNAMERule() {
		return gaMCBasics.getMCQUALIFIEDNAMERule();
	}
	
	//terminal DOTSTAR:
	//    '.*'
	//;
	public TerminalRule getDOTSTARRule() {
		return gaMCBasics.getDOTSTARRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
