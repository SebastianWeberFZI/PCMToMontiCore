/*
 * generated by Xtext 2.34.0
 */
package org.palladiosimulator.xtext.motiarc.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MontiArcDSLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class MACompilationUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.motiarc.MontiArcDSL.MACompilationUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPackageAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPackagePackageParserRuleCall_0_0 = (RuleCall)cPackageAssignment_0.eContents().get(0);
		private final Assignment cImportStatementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportStatementsImportStatementsParserRuleCall_1_0 = (RuleCall)cImportStatementsAssignment_1.eContents().get(0);
		private final Assignment cComponentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cComponentComponentParserRuleCall_2_0 = (RuleCall)cComponentAssignment_2.eContents().get(0);
		
		//MACompilationUnit:
		//    package=Package importStatements+=ImportStatements*
		//    component=Component;
		@Override public ParserRule getRule() { return rule; }
		
		//package=Package importStatements+=ImportStatements*
		//component=Component
		public Group getGroup() { return cGroup; }
		
		//package=Package
		public Assignment getPackageAssignment_0() { return cPackageAssignment_0; }
		
		//Package
		public RuleCall getPackagePackageParserRuleCall_0_0() { return cPackagePackageParserRuleCall_0_0; }
		
		//importStatements+=ImportStatements*
		public Assignment getImportStatementsAssignment_1() { return cImportStatementsAssignment_1; }
		
		//ImportStatements
		public RuleCall getImportStatementsImportStatementsParserRuleCall_1_0() { return cImportStatementsImportStatementsParserRuleCall_1_0; }
		
		//component=Component
		public Assignment getComponentAssignment_2() { return cComponentAssignment_2; }
		
		//Component
		public RuleCall getComponentComponentParserRuleCall_2_0() { return cComponentComponentParserRuleCall_2_0; }
	}
	public class ComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.motiarc.MontiArcDSL.Component");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComponentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cSignatureAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSignatureSignatureParserRuleCall_2_0 = (RuleCall)cSignatureAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cArcElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cArcElementsArcElementParserRuleCall_4_0 = (RuleCall)cArcElementsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// Component Head
		//Component:
		//    "component" name=ID signature=Signature
		//    "{" arcElements+=ArcElement* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"component" name=ID signature=Signature
		//"{" arcElements+=ArcElement* "}"
		public Group getGroup() { return cGroup; }
		
		//"component"
		public Keyword getComponentKeyword_0() { return cComponentKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//signature=Signature
		public Assignment getSignatureAssignment_2() { return cSignatureAssignment_2; }
		
		//Signature
		public RuleCall getSignatureSignatureParserRuleCall_2_0() { return cSignatureSignatureParserRuleCall_2_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//arcElements+=ArcElement*
		public Assignment getArcElementsAssignment_4() { return cArcElementsAssignment_4; }
		
		//ArcElement
		public RuleCall getArcElementsArcElementParserRuleCall_4_0() { return cArcElementsArcElementParserRuleCall_4_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class SignatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.motiarc.MontiArcDSL.Signature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSignatureAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cParametersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParametersParametersParserRuleCall_1_0 = (RuleCall)cParametersAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_2_1_0 = (RuleCall)cTypeAssignment_2_1.eContents().get(0);
		
		//Signature:
		//    {Signature} parameters?=Parameters? ("extends" type?=Type)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Signature} parameters?=Parameters? ("extends" type?=Type)?
		public Group getGroup() { return cGroup; }
		
		//{Signature}
		public Action getSignatureAction_0() { return cSignatureAction_0; }
		
		//parameters?=Parameters?
		public Assignment getParametersAssignment_1() { return cParametersAssignment_1; }
		
		//Parameters
		public RuleCall getParametersParametersParserRuleCall_1_0() { return cParametersParametersParserRuleCall_1_0; }
		
		//("extends" type?=Type)?
		public Group getGroup_2() { return cGroup_2; }
		
		//"extends"
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }
		
		//type?=Type
		public Assignment getTypeAssignment_2_1() { return cTypeAssignment_2_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_2_1_0() { return cTypeTypeParserRuleCall_2_1_0; }
	}
	public class ParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.motiarc.MontiArcDSL.Parameters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParametersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParametersParameterParserRuleCall_0_0 = (RuleCall)cParametersAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_1_1_0 = (RuleCall)cParametersAssignment_1_1.eContents().get(0);
		
		//Parameters:
		//    parameters+=Parameter ("," parameters+=Parameter)*;
		@Override public ParserRule getRule() { return rule; }
		
		//parameters+=Parameter ("," parameters+=Parameter)*
		public Group getGroup() { return cGroup; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_0() { return cParametersAssignment_0; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_0_0() { return cParametersParameterParserRuleCall_0_0; }
		
		//("," parameters+=Parameter)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_1_1() { return cParametersAssignment_1_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_1_1_0() { return cParametersParameterParserRuleCall_1_1_0; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.motiarc.MontiArcDSL.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExpressionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_2_1_0 = (RuleCall)cExpressionAssignment_2_1.eContents().get(0);
		
		//Parameter:
		//    type=Type name=ID ("=" expression?=Expression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//type=Type name=ID ("=" expression?=Expression)?
		public Group getGroup() { return cGroup; }
		
		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//("=" expression?=Expression)?
		public Group getGroup_2() { return cGroup_2; }
		
		//"="
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }
		
		//expression?=Expression
		public Assignment getExpressionAssignment_2_1() { return cExpressionAssignment_2_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_1_0() { return cExpressionExpressionParserRuleCall_2_1_0; }
	}
	public class ArcElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.motiarc.MontiArcDSL.ArcElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cComponentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSubComponentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cConnectorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPortsParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cVariableParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cAutomatonParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//ArcElement:
		//    Component | SubComponent | Connector | Ports | Variable | Automaton;
		@Override public ParserRule getRule() { return rule; }
		
		//Component | SubComponent | Connector | Ports | Variable | Automaton
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Component
		public RuleCall getComponentParserRuleCall_0() { return cComponentParserRuleCall_0; }
		
		//SubComponent
		public RuleCall getSubComponentParserRuleCall_1() { return cSubComponentParserRuleCall_1; }
		
		//Connector
		public RuleCall getConnectorParserRuleCall_2() { return cConnectorParserRuleCall_2; }
		
		//Ports
		public RuleCall getPortsParserRuleCall_3() { return cPortsParserRuleCall_3; }
		
		//Variable
		public RuleCall getVariableParserRuleCall_4() { return cVariableParserRuleCall_4; }
		
		//Automaton
		public RuleCall getAutomatonParserRuleCall_5() { return cAutomatonParserRuleCall_5; }
	}
	public class SubComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.motiarc.MontiArcDSL.SubComponent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComponentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgumentsArgumentsParserRuleCall_2_0 = (RuleCall)cArgumentsAssignment_2.eContents().get(0);
		private final Assignment cInstancesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInstancesNamesParserRuleCall_3_0 = (RuleCall)cInstancesAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// Component Body Elements
		//SubComponent:
		//    "component" type=Type arguments?=Arguments? instances=Names ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"component" type=Type arguments?=Arguments? instances=Names ";"
		public Group getGroup() { return cGroup; }
		
		//"component"
		public Keyword getComponentKeyword_0() { return cComponentKeyword_0; }
		
		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }
		
		//arguments?=Arguments?
		public Assignment getArgumentsAssignment_2() { return cArgumentsAssignment_2; }
		
		//Arguments
		public RuleCall getArgumentsArgumentsParserRuleCall_2_0() { return cArgumentsArgumentsParserRuleCall_2_0; }
		
		//instances=Names
		public Assignment getInstancesAssignment_3() { return cInstancesAssignment_3; }
		
		//Names
		public RuleCall getInstancesNamesParserRuleCall_3_0() { return cInstancesNamesParserRuleCall_3_0; }
		
		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class ConnectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.motiarc.MontiArcDSL.Connector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConnectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSourceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSourceIDTerminalRuleCall_1_0 = (RuleCall)cSourceAssignment_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTargetsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTargetsNamesParserRuleCall_3_0 = (RuleCall)cTargetsAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Connector:
		//    "connect" source=ID "->" targets=Names ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"connect" source=ID "->" targets=Names ";"
		public Group getGroup() { return cGroup; }
		
		//"connect"
		public Keyword getConnectKeyword_0() { return cConnectKeyword_0; }
		
		//source=ID
		public Assignment getSourceAssignment_1() { return cSourceAssignment_1; }
		
		//ID
		public RuleCall getSourceIDTerminalRuleCall_1_0() { return cSourceIDTerminalRuleCall_1_0; }
		
		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_2() { return cHyphenMinusGreaterThanSignKeyword_2; }
		
		//targets=Names
		public Assignment getTargetsAssignment_3() { return cTargetsAssignment_3; }
		
		//Names
		public RuleCall getTargetsNamesParserRuleCall_3_0() { return cTargetsNamesParserRuleCall_3_0; }
		
		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class PortsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.motiarc.MontiArcDSL.Ports");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPortKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPortsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPortsPortParserRuleCall_1_0 = (RuleCall)cPortsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPortsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPortsPortParserRuleCall_2_1_0 = (RuleCall)cPortsAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Ports:
		//    "port" ports+=Port ("," ports+=Port)+ ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"port" ports+=Port ("," ports+=Port)+ ";"
		public Group getGroup() { return cGroup; }
		
		//"port"
		public Keyword getPortKeyword_0() { return cPortKeyword_0; }
		
		//ports+=Port
		public Assignment getPortsAssignment_1() { return cPortsAssignment_1; }
		
		//Port
		public RuleCall getPortsPortParserRuleCall_1_0() { return cPortsPortParserRuleCall_1_0; }
		
		//("," ports+=Port)+
		public Group getGroup_2() { return cGroup_2; }
		
		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//ports+=Port
		public Assignment getPortsAssignment_2_1() { return cPortsAssignment_2_1; }
		
		//Port
		public RuleCall getPortsPortParserRuleCall_2_1_0() { return cPortsPortParserRuleCall_2_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class PortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.motiarc.MontiArcDSL.Port");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cInAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cInInKeyword_0_0_0 = (Keyword)cInAssignment_0_0.eContents().get(0);
		private final Assignment cOutAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cOutOutKeyword_0_1_0 = (Keyword)cOutAssignment_0_1.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNamesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNamesNamesParserRuleCall_2_0 = (RuleCall)cNamesAssignment_2.eContents().get(0);
		
		//Port:
		//    (in?="in" | out?="out") type=Type names?=Names?;
		@Override public ParserRule getRule() { return rule; }
		
		//(in?="in" | out?="out") type=Type names?=Names?
		public Group getGroup() { return cGroup; }
		
		//(in?="in" | out?="out")
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//in?="in"
		public Assignment getInAssignment_0_0() { return cInAssignment_0_0; }
		
		//"in"
		public Keyword getInInKeyword_0_0_0() { return cInInKeyword_0_0_0; }
		
		//out?="out"
		public Assignment getOutAssignment_0_1() { return cOutAssignment_0_1; }
		
		//"out"
		public Keyword getOutOutKeyword_0_1_0() { return cOutOutKeyword_0_1_0; }
		
		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }
		
		//names?=Names?
		public Assignment getNamesAssignment_2() { return cNamesAssignment_2; }
		
		//Names
		public RuleCall getNamesNamesParserRuleCall_2_0() { return cNamesNamesParserRuleCall_2_0; }
	}
	public class NamesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.motiarc.MontiArcDSL.Names");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNamesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNamesIDTerminalRuleCall_0_0 = (RuleCall)cNamesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNamesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNamesIDTerminalRuleCall_1_1_0 = (RuleCall)cNamesAssignment_1_1.eContents().get(0);
		
		//Names:
		//    names+=ID ("," names+=ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//names+=ID ("," names+=ID)*
		public Group getGroup() { return cGroup; }
		
		//names+=ID
		public Assignment getNamesAssignment_0() { return cNamesAssignment_0; }
		
		//ID
		public RuleCall getNamesIDTerminalRuleCall_0_0() { return cNamesIDTerminalRuleCall_0_0; }
		
		//("," names+=ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//names+=ID
		public Assignment getNamesAssignment_1_1() { return cNamesAssignment_1_1; }
		
		//ID
		public RuleCall getNamesIDTerminalRuleCall_1_1_0() { return cNamesIDTerminalRuleCall_1_1_0; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.motiarc.MontiArcDSL.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNamesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamesNamesParserRuleCall_1_0 = (RuleCall)cNamesAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//// Embedded Behavior Elements
		//Variable:
		//    type=Type names?=Names? ";";
		@Override public ParserRule getRule() { return rule; }
		
		//type=Type names?=Names? ";"
		public Group getGroup() { return cGroup; }
		
		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }
		
		//names?=Names?
		public Assignment getNamesAssignment_1() { return cNamesAssignment_1; }
		
		//Names
		public RuleCall getNamesNamesParserRuleCall_1_0() { return cNamesNamesParserRuleCall_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class AutomatonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.motiarc.MontiArcDSL.Automaton");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAutomatonAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAutomatonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cStatesAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cStatesStateParserRuleCall_4_0_0 = (RuleCall)cStatesAssignment_4_0.eContents().get(0);
		private final Assignment cInitialStatesAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cInitialStatesInitialStateParserRuleCall_4_1_0 = (RuleCall)cInitialStatesAssignment_4_1.eContents().get(0);
		private final Assignment cTransitionsAssignment_4_2 = (Assignment)cAlternatives_4.eContents().get(2);
		private final RuleCall cTransitionsTransitionParserRuleCall_4_2_0 = (RuleCall)cTransitionsAssignment_4_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Automaton:
		//    {Automaton} "automaton" name?=ID? "{" (states+=State |
		//    initialStates+=InitialState | transitions+=Transition)* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//{Automaton} "automaton" name?=ID? "{" (states+=State |
		//initialStates+=InitialState | transitions+=Transition)* "}"
		public Group getGroup() { return cGroup; }
		
		//{Automaton}
		public Action getAutomatonAction_0() { return cAutomatonAction_0; }
		
		//"automaton"
		public Keyword getAutomatonKeyword_1() { return cAutomatonKeyword_1; }
		
		//name?=ID?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(states+=State |
		//   initialStates+=InitialState | transitions+=Transition)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//states+=State
		public Assignment getStatesAssignment_4_0() { return cStatesAssignment_4_0; }
		
		//State
		public RuleCall getStatesStateParserRuleCall_4_0_0() { return cStatesStateParserRuleCall_4_0_0; }
		
		//initialStates+=InitialState
		public Assignment getInitialStatesAssignment_4_1() { return cInitialStatesAssignment_4_1; }
		
		//InitialState
		public RuleCall getInitialStatesInitialStateParserRuleCall_4_1_0() { return cInitialStatesInitialStateParserRuleCall_4_1_0; }
		
		//transitions+=Transition
		public Assignment getTransitionsAssignment_4_2() { return cTransitionsAssignment_4_2; }
		
		//Transition
		public RuleCall getTransitionsTransitionParserRuleCall_4_2_0() { return cTransitionsTransitionParserRuleCall_4_2_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.motiarc.MontiArcDSL.State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//State:
		//    "state" name=ID ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"state" name=ID ";"
		public Group getGroup() { return cGroup; }
		
		//"state"
		public Keyword getStateKeyword_0() { return cStateKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class InitialStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.motiarc.MontiArcDSL.InitialState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInitialKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSolidusKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cBlockAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cBlockBlockParserRuleCall_2_1_0 = (RuleCall)cBlockAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//InitialState:
		//    "initial" name=ID ("/" block?=Block)? ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"initial" name=ID ("/" block?=Block)? ";"
		public Group getGroup() { return cGroup; }
		
		//"initial"
		public Keyword getInitialKeyword_0() { return cInitialKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//("/" block?=Block)?
		public Group getGroup_2() { return cGroup_2; }
		
		//"/"
		public Keyword getSolidusKeyword_2_0() { return cSolidusKeyword_2_0; }
		
		//block?=Block
		public Assignment getBlockAssignment_2_1() { return cBlockAssignment_2_1; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_2_1_0() { return cBlockBlockParserRuleCall_2_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.motiarc.MontiArcDSL.Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceStateCrossReference_0_0 = (CrossReference)cSourceAssignment_0.eContents().get(0);
		private final RuleCall cSourceStateIDTerminalRuleCall_0_0_1 = (RuleCall)cSourceStateCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTargetAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cTargetCrossReference_1_1_0 = (CrossReference)cTargetAssignment_1_1.eContents().get(0);
		private final RuleCall cTargetIDTerminalRuleCall_1_1_0_1 = (RuleCall)cTargetCrossReference_1_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExpressionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_2_1_0 = (RuleCall)cExpressionAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cSolidusKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cReactionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cReactionBlockParserRuleCall_3_1_0 = (RuleCall)cReactionAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Transition:
		//    source=[State] ("->" target?=[State])?
		//    ("[" expression?=Expression "]")?("/" reaction?=Block)?";";
		@Override public ParserRule getRule() { return rule; }
		
		//source=[State] ("->" target?=[State])?
		//("[" expression?=Expression "]")?("/" reaction?=Block)?";"
		public Group getGroup() { return cGroup; }
		
		//source=[State]
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }
		
		//[State]
		public CrossReference getSourceStateCrossReference_0_0() { return cSourceStateCrossReference_0_0; }
		
		//ID
		public RuleCall getSourceStateIDTerminalRuleCall_0_0_1() { return cSourceStateIDTerminalRuleCall_0_0_1; }
		
		//("->" target?=[State])?
		public Group getGroup_1() { return cGroup_1; }
		
		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_0() { return cHyphenMinusGreaterThanSignKeyword_1_0; }
		
		//target?=[State]
		public Assignment getTargetAssignment_1_1() { return cTargetAssignment_1_1; }
		
		//[State]
		public CrossReference getTargetCrossReference_1_1_0() { return cTargetCrossReference_1_1_0; }
		
		//ID
		public RuleCall getTargetIDTerminalRuleCall_1_1_0_1() { return cTargetIDTerminalRuleCall_1_1_0_1; }
		
		//("[" expression?=Expression "]")?
		public Group getGroup_2() { return cGroup_2; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//expression?=Expression
		public Assignment getExpressionAssignment_2_1() { return cExpressionAssignment_2_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_1_0() { return cExpressionExpressionParserRuleCall_2_1_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }
		
		//("/" reaction?=Block)?
		public Group getGroup_3() { return cGroup_3; }
		
		//"/"
		public Keyword getSolidusKeyword_3_0() { return cSolidusKeyword_3_0; }
		
		//reaction?=Block
		public Assignment getReactionAssignment_3_1() { return cReactionAssignment_3_1; }
		
		//Block
		public RuleCall getReactionBlockParserRuleCall_3_1_0() { return cReactionBlockParserRuleCall_3_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.motiarc.MontiArcDSL.Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionsExpressionParserRuleCall_2_0 = (RuleCall)cExpressionsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExpressionsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExpressionsExpressionParserRuleCall_3_1_0 = (RuleCall)cExpressionsAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Block:
		//    "{" (name?=ID "=")? expressions+=Expression
		//    ("," expressions+=Expression)* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"{" (name?=ID "=")? expressions+=Expression
		//("," expressions+=Expression)* "}"
		public Group getGroup() { return cGroup; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//(name?=ID "=")?
		public Group getGroup_1() { return cGroup_1; }
		
		//name?=ID
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }
		
		//expressions+=Expression
		public Assignment getExpressionsAssignment_2() { return cExpressionsAssignment_2; }
		
		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_2_0() { return cExpressionsExpressionParserRuleCall_2_0; }
		
		//("," expressions+=Expression)*
		public Group getGroup_3() { return cGroup_3; }
		
		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//expressions+=Expression
		public Assignment getExpressionsAssignment_3_1() { return cExpressionsAssignment_3_1; }
		
		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_3_1_0() { return cExpressionsExpressionParserRuleCall_3_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	
	
	private final MACompilationUnitElements pMACompilationUnit;
	private final ComponentElements pComponent;
	private final SignatureElements pSignature;
	private final ParametersElements pParameters;
	private final ParameterElements pParameter;
	private final ArcElementElements pArcElement;
	private final SubComponentElements pSubComponent;
	private final ConnectorElements pConnector;
	private final PortsElements pPorts;
	private final PortElements pPort;
	private final NamesElements pNames;
	private final VariableElements pVariable;
	private final AutomatonElements pAutomaton;
	private final StateElements pState;
	private final InitialStateElements pInitialState;
	private final TransitionElements pTransition;
	private final BlockElements pBlock;
	
	private final Grammar grammar;
	
	private final MCBasicsGrammarAccess gaMCBasics;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MontiArcDSLGrammarAccess(GrammarProvider grammarProvider,
			MCBasicsGrammarAccess gaMCBasics,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaMCBasics = gaMCBasics;
		this.gaTerminals = gaTerminals;
		this.pMACompilationUnit = new MACompilationUnitElements();
		this.pComponent = new ComponentElements();
		this.pSignature = new SignatureElements();
		this.pParameters = new ParametersElements();
		this.pParameter = new ParameterElements();
		this.pArcElement = new ArcElementElements();
		this.pSubComponent = new SubComponentElements();
		this.pConnector = new ConnectorElements();
		this.pPorts = new PortsElements();
		this.pPort = new PortElements();
		this.pNames = new NamesElements();
		this.pVariable = new VariableElements();
		this.pAutomaton = new AutomatonElements();
		this.pState = new StateElements();
		this.pInitialState = new InitialStateElements();
		this.pTransition = new TransitionElements();
		this.pBlock = new BlockElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.palladiosimulator.xtext.motiarc.MontiArcDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public MCBasicsGrammarAccess getMCBasicsGrammarAccess() {
		return gaMCBasics;
	}
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//MACompilationUnit:
	//    package=Package importStatements+=ImportStatements*
	//    component=Component;
	public MACompilationUnitElements getMACompilationUnitAccess() {
		return pMACompilationUnit;
	}
	
	public ParserRule getMACompilationUnitRule() {
		return getMACompilationUnitAccess().getRule();
	}
	
	//// Component Head
	//Component:
	//    "component" name=ID signature=Signature
	//    "{" arcElements+=ArcElement* "}";
	public ComponentElements getComponentAccess() {
		return pComponent;
	}
	
	public ParserRule getComponentRule() {
		return getComponentAccess().getRule();
	}
	
	//Signature:
	//    {Signature} parameters?=Parameters? ("extends" type?=Type)?;
	public SignatureElements getSignatureAccess() {
		return pSignature;
	}
	
	public ParserRule getSignatureRule() {
		return getSignatureAccess().getRule();
	}
	
	//Parameters:
	//    parameters+=Parameter ("," parameters+=Parameter)*;
	public ParametersElements getParametersAccess() {
		return pParameters;
	}
	
	public ParserRule getParametersRule() {
		return getParametersAccess().getRule();
	}
	
	//Parameter:
	//    type=Type name=ID ("=" expression?=Expression)?;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//ArcElement:
	//    Component | SubComponent | Connector | Ports | Variable | Automaton;
	public ArcElementElements getArcElementAccess() {
		return pArcElement;
	}
	
	public ParserRule getArcElementRule() {
		return getArcElementAccess().getRule();
	}
	
	//// Component Body Elements
	//SubComponent:
	//    "component" type=Type arguments?=Arguments? instances=Names ";";
	public SubComponentElements getSubComponentAccess() {
		return pSubComponent;
	}
	
	public ParserRule getSubComponentRule() {
		return getSubComponentAccess().getRule();
	}
	
	//Connector:
	//    "connect" source=ID "->" targets=Names ";";
	public ConnectorElements getConnectorAccess() {
		return pConnector;
	}
	
	public ParserRule getConnectorRule() {
		return getConnectorAccess().getRule();
	}
	
	//Ports:
	//    "port" ports+=Port ("," ports+=Port)+ ";";
	public PortsElements getPortsAccess() {
		return pPorts;
	}
	
	public ParserRule getPortsRule() {
		return getPortsAccess().getRule();
	}
	
	//Port:
	//    (in?="in" | out?="out") type=Type names?=Names?;
	public PortElements getPortAccess() {
		return pPort;
	}
	
	public ParserRule getPortRule() {
		return getPortAccess().getRule();
	}
	
	//Names:
	//    names+=ID ("," names+=ID)*;
	public NamesElements getNamesAccess() {
		return pNames;
	}
	
	public ParserRule getNamesRule() {
		return getNamesAccess().getRule();
	}
	
	//// Embedded Behavior Elements
	//Variable:
	//    type=Type names?=Names? ";";
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//Automaton:
	//    {Automaton} "automaton" name?=ID? "{" (states+=State |
	//    initialStates+=InitialState | transitions+=Transition)* "}";
	public AutomatonElements getAutomatonAccess() {
		return pAutomaton;
	}
	
	public ParserRule getAutomatonRule() {
		return getAutomatonAccess().getRule();
	}
	
	//State:
	//    "state" name=ID ";";
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//InitialState:
	//    "initial" name=ID ("/" block?=Block)? ";";
	public InitialStateElements getInitialStateAccess() {
		return pInitialState;
	}
	
	public ParserRule getInitialStateRule() {
		return getInitialStateAccess().getRule();
	}
	
	//Transition:
	//    source=[State] ("->" target?=[State])?
	//    ("[" expression?=Expression "]")?("/" reaction?=Block)?";";
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}
	
	//Block:
	//    "{" (name?=ID "=")? expressions+=Expression
	//    ("," expressions+=Expression)* "}";
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//ImportStatements:
	//    'import' importUri=MCQUALIFIEDNAME ('.' star='*')? ";"
	//;
	public MCBasicsGrammarAccess.ImportStatementsElements getImportStatementsAccess() {
		return gaMCBasics.getImportStatementsAccess();
	}
	
	public ParserRule getImportStatementsRule() {
		return getImportStatementsAccess().getRule();
	}
	
	//Package:
	//    'package' name=MCQUALIFIEDNAME ';'
	//;
	public MCBasicsGrammarAccess.PackageElements getPackageAccess() {
		return gaMCBasics.getPackageAccess();
	}
	
	public ParserRule getPackageRule() {
		return getPackageAccess().getRule();
	}
	
	//Type:
	//    MCPrimitiveType | MCArrayType
	//;
	public MCBasicsGrammarAccess.TypeElements getTypeAccess() {
		return gaMCBasics.getTypeAccess();
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//MCPrimitiveType:
	//     type = ( 'boolean' | 'byte' | 'short' | 'int'
	//                  | 'long' | 'char' |'float' | 'double' )
	//;
	public MCBasicsGrammarAccess.MCPrimitiveTypeElements getMCPrimitiveTypeAccess() {
		return gaMCBasics.getMCPrimitiveTypeAccess();
	}
	
	public ParserRule getMCPrimitiveTypeRule() {
		return getMCPrimitiveTypeAccess().getRule();
	}
	
	//MCArrayType:
	//    MCPrimitiveType'['']'
	//;
	public MCBasicsGrammarAccess.MCArrayTypeElements getMCArrayTypeAccess() {
		return gaMCBasics.getMCArrayTypeAccess();
	}
	
	public ParserRule getMCArrayTypeRule() {
		return getMCArrayTypeAccess().getRule();
	}
	
	//Expression:
	//    'exp' name=ID
	//;
	public MCBasicsGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaMCBasics.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Arguments:
	//    'arg' name=ID
	//;
	public MCBasicsGrammarAccess.ArgumentsElements getArgumentsAccess() {
		return gaMCBasics.getArgumentsAccess();
	}
	
	public ParserRule getArgumentsRule() {
		return getArgumentsAccess().getRule();
	}
	
	//terminal MCQUALIFIEDNAME:
	//    ID ('.' ID)+
	//;
	public TerminalRule getMCQUALIFIEDNAMERule() {
		return gaMCBasics.getMCQUALIFIEDNAMERule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
